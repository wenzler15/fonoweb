
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AnamnesisScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  patientId: 'patientId',
  doctorId: 'doctorId',
  specialtyId: 'specialtyId',
  questions: 'questions',
  title: 'title',
  text: 'text',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  doctorId: 'doctorId',
  patientId: 'patientId',
  when: 'when',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  status: 'status'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  creatorId: 'creatorId',
  specialtyId: 'specialtyId',
  order: 'order',
  title: 'title',
  cover: 'cover',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DoctorPatientScalarFieldEnum = {
  doctorId: 'doctorId',
  patientId: 'patientId',
  assignedById: 'assignedById',
  createdAt: 'createdAt',
  active: 'active'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  userId: 'userId',
  specialtyId: 'specialtyId',
  crfa: 'crfa',
  availability: 'availability',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EvaluationScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  patientId: 'patientId',
  doctorId: 'doctorId',
  specialtyId: 'specialtyId',
  text: 'text',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EvolutionScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  patientId: 'patientId',
  doctorId: 'doctorId',
  specialtyId: 'specialtyId',
  exercises: 'exercises',
  text: 'text',
  title: 'title',
  appointmentDate: 'appointmentDate',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  title: 'title',
  description: 'description',
  links: 'links',
  creatorId: 'creatorId',
  specialtyId: 'specialtyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  creatorId: 'creatorId',
  courseId: 'courseId',
  order: 'order',
  title: 'title',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.LessonVideoScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  lessonId: 'lessonId',
  order: 'order',
  title: 'title',
  video: 'video',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.SpecialtyScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  doctorId: 'doctorId',
  type: 'type',
  specialtyId: 'specialtyId',
  title: 'title',
  html: 'html',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserAdressScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  userId: 'userId',
  streetName: 'streetName',
  zipCode: 'zipCode',
  district: 'district',
  state: 'state',
  city: 'city',
  number: 'number',
  complement: 'complement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserContactScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  userId: 'userId',
  email: 'email',
  area: 'area',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  socialName: 'socialName',
  email: 'email',
  name: 'name',
  gender: 'gender',
  customGender: 'customGender',
  cpf: 'cpf',
  birthDate: 'birthDate',
  password: 'password',
  type: 'type',
  avatar: 'avatar',
  facebookToken: 'facebookToken',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  isAdmin: 'isAdmin',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.WatchedVideoScalarFieldEnum = {
  id: 'id',
  numericId: 'numericId',
  userId: 'userId',
  videoId: 'videoId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};
exports.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  CANCELED: 'CANCELED',
  FINISHED: 'FINISHED'
};

exports.TemplateType = {
  ANAMNESIS: 'ANAMNESIS',
  EVALUATION: 'EVALUATION'
};

exports.UserType = {
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserAdress: 'UserAdress',
  UserContact: 'UserContact',
  Patient: 'Patient',
  Appointment: 'Appointment',
  Doctor: 'Doctor',
  DoctorPatient: 'DoctorPatient',
  Specialty: 'Specialty',
  Anamnesis: 'Anamnesis',
  Evolution: 'Evolution',
  Evaluation: 'Evaluation',
  Exercise: 'Exercise',
  Template: 'Template',
  Course: 'Course',
  Lesson: 'Lesson',
  LessonVideo: 'LessonVideo',
  WatchedVideo: 'WatchedVideo'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
