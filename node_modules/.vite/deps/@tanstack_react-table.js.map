{
  "version": 3,
  "sources": ["../../@tanstack/table-core/src/utils.ts", "../../@tanstack/table-core/src/core/column.ts", "../../@tanstack/table-core/src/core/headers.ts", "../../@tanstack/table-core/src/features/ColumnSizing.ts", "../../@tanstack/table-core/src/features/Expanding.ts", "../../@tanstack/table-core/src/filterFns.ts", "../../@tanstack/table-core/src/features/Filters.ts", "../../@tanstack/table-core/src/aggregationFns.ts", "../../@tanstack/table-core/src/features/Grouping.ts", "../../@tanstack/table-core/src/features/Ordering.ts", "../../@tanstack/table-core/src/features/Pagination.ts", "../../@tanstack/table-core/src/features/Pinning.ts", "../../@tanstack/table-core/src/features/RowSelection.ts", "../../@tanstack/table-core/src/sortingFns.ts", "../../@tanstack/table-core/src/features/Sorting.ts", "../../@tanstack/table-core/src/features/Visibility.ts", "../../@tanstack/table-core/src/core/table.ts", "../../@tanstack/table-core/src/core/cell.ts", "../../@tanstack/table-core/src/core/row.ts", "../../@tanstack/table-core/src/columnHelper.ts", "../../@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../@tanstack/react-table/src/index.tsx"],
  "sourcesContent": ["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n", "import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(row.getValue<string>(columnId)?.toLowerCase().includes(search))\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(row.getValue<string>(columnId)?.includes(filterValue))\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n", "import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n", "import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n", "import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n        \n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if(!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n"],
  "mappings": "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",
  "names": ["functionalUpdate", "updater", "input", "noop", "makeStateUpdater", "key", "instance", "setState", "old", "isFunction", "d", "Function", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "createColumn", "table", "columnDef", "depth", "parent", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "id", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "warn", "process", "Error", "column", "columns", "getFlatColumns", "flatMap", "options", "debugAll", "debugColumns", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "leafColumns", "_features", "reduce", "obj", "feature", "Object", "assign", "createHeader", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "getContext", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "leftColumns", "columnId", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "debugHeaders", "getCenterHeaderGroups", "getLeftHeaderGroups", "orderedLeafColumns", "getRightHeaderGroups", "getFooterGroups", "reverse", "getLeftFooterGroups", "getCenterFooterGroups", "getRightFooterGroups", "getFlatHeaders", "headers", "getLeftFlatHeaders", "getCenterFlatHeaders", "getRightFlatHeaders", "getCenterLeafHeaders", "flatHeaders", "getLeftLeafHeaders", "getRightLeafHeaders", "center", "columnsToGroup", "headerFamily", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "defaultColumnSizing", "size", "minSize", "maxSize", "Number", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "getDefaultColumnDef", "getInitialState", "state", "columnSizing", "columnSizingInfo", "getDefaultOptions", "columnResizeMode", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "columnSize", "getStart", "position", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "findIndex", "prevSiblingColumn", "resetSize", "setColumnSizing", "_", "rest", "getCanResize", "enableResizing", "enableColumnResizing", "getIsResizing", "sum", "prevSiblingHeader", "getResizeHandler", "getColumn", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "headerSize", "onMove", "onEnd", "mouseEvents", "moveHandler", "upHandler", "document", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "defaultState", "initialState", "resetHeaderSizeInfo", "getTotalSize", "getLeftTotalSize", "getCenterTotalSize", "getRightTotalSize", "passiveSupported", "supported", "window", "err", "type", "Expanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "getCanSomeRowsExpand", "getRowModel", "flatRows", "row", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "values", "keys", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "createRow", "toggleExpanded", "exists", "oldExpanded", "rowId", "getIsRowExpanded", "getRowCanExpand", "enableExpanding", "subRows", "getToggleExpandedHandler", "canExpand", "includesString", "filterValue", "search", "toLowerCase", "getValue", "autoRemove", "val", "testFalsey", "includesStringSensitive", "equalsString", "arrIncludes", "arrIncludesAll", "arrIncludesSome", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "isNaN", "Infinity", "temp", "filterFns", "Filters", "filterFn", "columnFilters", "globalFilter", "onColumnFiltersChange", "onGlobalFilterChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "globalFilterFn", "getColumnCanGlobalFilter", "value", "getCoreRowModel", "_getAllCellsByColumnId", "getAutoFilterFn", "firstRow", "Array", "isArray", "getFilterFn", "getCanFilter", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getCanGlobalFilter", "enableGlobalFilter", "getIsFiltered", "getFilterIndex", "getFilterValue", "setFilterValue", "setColumnFilters", "previousfilter", "newFilter", "shouldAutoRemoveFilter", "newFilterObj", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "columnFiltersMeta", "getGlobalAutoFilterFn", "getGlobalFilterFn", "getAllLeafColumns", "updateFn", "setGlobalFilter", "resetGlobalFilter", "resetColumnFilters", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "unique", "from", "Set", "uniqueCount", "_columnId", "aggregationFns", "Grouping", "aggregatedCell", "props", "toString", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getIsGrouped", "getGroupedIndex", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "prototype", "call", "getAggregationFn", "resetGrouping", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "_groupingValuesCache", "createCell", "cell", "getIsPlaceholder", "getIsAggregated", "nonGroupingColumns", "col", "groupingColumns", "g", "Ordering", "columnOrder", "onColumnOrderChange", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "Pagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "setPageIndex", "maxPageIndex", "pageCount", "resetPageSize", "setPageSize", "topRowIndex", "floor", "setPageCount", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "i", "debugTable", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "getPrePaginationRowModel", "getPaginationRowModel", "_getPaginationRowModel", "ceil", "rows", "getDefaultPinningState", "Pinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "getCanPin", "enablePinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "allCells", "leftAndRight", "debugRows", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "pinningState", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "target", "checked", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "selectedRowIds", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "getToggleSelectedHandler", "canSelect", "getRow", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "selection", "allChildrenSelected", "someSelected", "subRow", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "a", "b", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sort", "sortingFns", "Sorting", "sorting", "sortingFn", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "slice", "isString", "getAutoSortDir", "getSortingFn", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "maxMultiSortColCount", "getFirstSortDir", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "enableMultiSort", "columnSort", "getSortIndex", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "Visibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "enableHiding", "getToggleVisibilityHandler", "getAllCells", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "getIsAllColumnsVisible", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "features", "defaultOptions", "mergeOptions", "coreInitialState", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "acc", "getRenderValue", "renderFallbackValue", "original", "rowIndex", "_valuesCache", "_uniqueValuesCache", "hasOwnProperty", "getUniqueValues", "getLeafRows", "createColumnHelper", "accessor", "display", "group", "data", "accessRows", "originalRows", "getSubRows", "originalSubRows", "filterRows", "filterRowImpl", "filterRowModelFromLeafs", "filterRowModelFromRoot", "rowsToFilter", "filterRow", "newFilteredFlatRows", "newFilteredRowsById", "recurseFilterRows", "newRow", "pass", "resolvedColumnFilters", "resolvedGlobalFilters", "filterableIds", "globallyFilterableColumns", "currentColumnFilter", "currentGlobalFilter", "j", "filterMeta", "__global__", "filterRowsImpl", "preRowModel", "facetedRowModel", "facetedUniqueValues", "has", "set", "get", "firstValue", "facetedMinMaxValues", "sortingState", "sortedFlatRows", "availableSorting", "columnInfoById", "sortEntry", "sortUndefined", "invertSorting", "sortData", "sortedData", "columnInfo", "isDesc", "aValue", "bValue", "aUndefined", "bUndefined", "sortInt", "existingGrouping", "groupedFlatRows", "groupedRowsById", "groupUpRecursively", "parentId", "rowGroupsMap", "groupBy", "aggregatedGroupedRows", "entries", "groupingValue", "groupedRows", "aggregateFn", "groupMap", "resKey", "previous", "expandRows", "expandedRows", "handleRow", "pageStart", "pageEnd", "paginatedRowModel", "flexRender", "Comp", "props", "isReactComponent", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater"]
}
