import {
  capitalize_default,
  init_base,
  init_capitalize
} from "./chunk-QCRFQG4L.js";
import {
  init_useThemeProps,
  useThemeProps
} from "./chunk-ORUJFTGG.js";
import {
  init_styled,
  styled_default
} from "./chunk-YP54SQIN.js";
import {
  init_generateUtilityClass
} from "./chunk-KW225RNL.js";
import {
  _objectWithoutPropertiesLoose,
  chainPropTypes,
  composeClasses,
  css,
  generateUtilityClass,
  generateUtilityClasses,
  init_esm,
  init_esm2,
  init_objectWithoutPropertiesLoose,
  keyframes,
  require_prop_types
} from "./chunk-6UQGC4GI.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-GZZJSLR2.js";
import {
  _extends,
  init_extends
} from "./chunk-M5CWVIST.js";
import {
  require_jsx_runtime
} from "./chunk-FEVPAJEA.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __esm,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@mui/material/CircularProgress/circularProgressClasses.js
function getCircularProgressUtilityClass(slot) {
  return generateUtilityClass("MuiCircularProgress", slot);
}
var circularProgressClasses, circularProgressClasses_default;
var init_circularProgressClasses = __esm({
  "node_modules/@mui/material/CircularProgress/circularProgressClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
    circularProgressClasses_default = circularProgressClasses;
  }
});

// node_modules/@mui/material/CircularProgress/CircularProgress.js
var React, import_prop_types, import_jsx_runtime, _excluded, _, _t, _t2, _t3, _t4, SIZE, circularRotateKeyframe, circularDashKeyframe, useUtilityClasses, CircularProgressRoot, CircularProgressSVG, CircularProgressCircle, CircularProgress, CircularProgress_default;
var init_CircularProgress = __esm({
  "node_modules/@mui/material/CircularProgress/CircularProgress.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_base();
    init_esm2();
    init_capitalize();
    init_useThemeProps();
    init_styled();
    init_circularProgressClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    _excluded = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
    _ = (t) => t;
    SIZE = 44;
    circularRotateKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
    circularDashKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        variant,
        color,
        disableShrink
      } = ownerState;
      const slots = {
        root: ["root", variant, `color${capitalize_default(color)}`],
        svg: ["svg"],
        circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
      };
      return composeClasses(slots, getCircularProgressUtilityClass, classes);
    };
    CircularProgressRoot = styled_default("span", {
      name: "MuiCircularProgress",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[ownerState.variant], styles[`color${capitalize_default(ownerState.color)}`]];
      }
    })(({
      ownerState,
      theme
    }) => _extends({
      display: "inline-block"
    }, ownerState.variant === "determinate" && {
      transition: theme.transitions.create("transform")
    }, ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }), ({
      ownerState
    }) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
    CircularProgressSVG = styled_default("svg", {
      name: "MuiCircularProgress",
      slot: "Svg",
      overridesResolver: (props, styles) => styles.svg
    })({
      display: "block"
    });
    CircularProgressCircle = styled_default("circle", {
      name: "MuiCircularProgress",
      slot: "Circle",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.circle, styles[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
      }
    })(({
      ownerState,
      theme
    }) => _extends({
      stroke: "currentColor"
    }, ownerState.variant === "determinate" && {
      transition: theme.transitions.create("stroke-dashoffset")
    }, ownerState.variant === "indeterminate" && {
      strokeDasharray: "80px, 200px",
      strokeDashoffset: 0
    }), ({
      ownerState
    }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
    CircularProgress = React.forwardRef(function CircularProgress2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiCircularProgress"
      });
      const {
        className,
        color = "primary",
        disableShrink = false,
        size = 40,
        style,
        thickness = 3.6,
        value = 0,
        variant = "indeterminate"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const ownerState = _extends({}, props, {
        color,
        disableShrink,
        size,
        thickness,
        value,
        variant
      });
      const classes = useUtilityClasses(ownerState);
      const circleStyle = {};
      const rootStyle = {};
      const rootProps = {};
      if (variant === "determinate") {
        const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps["aria-valuenow"] = Math.round(value);
        circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
        rootStyle.transform = "rotate(-90deg)";
      }
      return (0, import_jsx_runtime.jsx)(CircularProgressRoot, _extends({
        className: clsx_m_default(classes.root, className),
        style: _extends({
          width: size,
          height: size
        }, rootStyle, style),
        ownerState,
        ref,
        role: "progressbar"
      }, rootProps, other, {
        children: (0, import_jsx_runtime.jsx)(CircularProgressSVG, {
          className: classes.svg,
          ownerState,
          viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
          children: (0, import_jsx_runtime.jsx)(CircularProgressCircle, {
            className: classes.circle,
            style: circleStyle,
            ownerState,
            cx: SIZE,
            cy: SIZE,
            r: (SIZE - thickness) / 2,
            fill: "none",
            strokeWidth: thickness
          })
        })
      }));
    });
    true ? CircularProgress.propTypes = {
      classes: import_prop_types.default.object,
      className: import_prop_types.default.string,
      color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types.default.string]),
      disableShrink: chainPropTypes(import_prop_types.default.bool, (props) => {
        if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
          return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
        }
        return null;
      }),
      size: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
      style: import_prop_types.default.object,
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
      thickness: import_prop_types.default.number,
      value: import_prop_types.default.number,
      variant: import_prop_types.default.oneOf(["determinate", "indeterminate"])
    } : void 0;
    CircularProgress_default = CircularProgress;
  }
});

// node_modules/@mui/material/CircularProgress/index.js
var init_CircularProgress2 = __esm({
  "node_modules/@mui/material/CircularProgress/index.js"() {
    init_CircularProgress();
    init_circularProgressClasses();
    init_circularProgressClasses();
  }
});

export {
  getCircularProgressUtilityClass,
  circularProgressClasses_default,
  CircularProgress_default,
  init_CircularProgress2 as init_CircularProgress
};
//# sourceMappingURL=chunk-FVC2FTY3.js.map
