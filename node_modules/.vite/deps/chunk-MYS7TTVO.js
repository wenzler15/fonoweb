import {
  GlobalStyles_default,
  init_GlobalStyles
} from "./chunk-Y64QXAUK.js";
import {
  getOverlayAlpha_default,
  init_getOverlayAlpha,
  init_styles
} from "./chunk-Z6GJWKOZ.js";
import {
  ButtonBase_default,
  Transition_default,
  init_ButtonBase,
  init_esm as init_esm3
} from "./chunk-NSKKDHTI.js";
import {
  init_useTheme,
  useTheme
} from "./chunk-72WB36JH.js";
import {
  init_unsupportedProp,
  init_useEnhancedEffect,
  unsupportedProp_default,
  useEnhancedEffect_default
} from "./chunk-PDQDL7RV.js";
import {
  PopperUnstyled_default,
  TextareaAutosize_default,
  capitalize_default,
  createSvgIcon,
  init_PopperUnstyled,
  init_base,
  init_capitalize,
  init_createSvgIcon,
  isHostComponent
} from "./chunk-QCRFQG4L.js";
import {
  init_useForkRef,
  useForkRef_default
} from "./chunk-NK755PVH.js";
import {
  init_useThemeProps,
  useThemeProps
} from "./chunk-ORUJFTGG.js";
import {
  init_styled,
  styled_default
} from "./chunk-YP54SQIN.js";
import {
  init_generateUtilityClass
} from "./chunk-KW225RNL.js";
import {
  HTMLElementType,
  _objectWithoutPropertiesLoose,
  alpha,
  chainPropTypes,
  composeClasses,
  elementAcceptingRef_default,
  elementTypeAcceptingRef_default,
  extendSxProp,
  generateUtilityClass,
  generateUtilityClasses,
  init_esm,
  init_esm2,
  init_objectWithoutPropertiesLoose,
  integerPropType_default,
  refType_default,
  require_prop_types,
  useThemeWithoutDefault_default
} from "./chunk-6UQGC4GI.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-GZZJSLR2.js";
import {
  _extends,
  init_extends
} from "./chunk-M5CWVIST.js";
import {
  require_jsx_runtime
} from "./chunk-FEVPAJEA.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __esm,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@mui/material/Paper/paperClasses.js
function getPaperUtilityClass(slot) {
  return generateUtilityClass("MuiPaper", slot);
}
var paperClasses, paperClasses_default;
var init_paperClasses = __esm({
  "node_modules/@mui/material/Paper/paperClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
    paperClasses_default = paperClasses;
  }
});

// node_modules/@mui/material/Paper/Paper.js
var React, import_prop_types, import_jsx_runtime, _excluded, useUtilityClasses, PaperRoot, Paper, Paper_default;
var init_Paper = __esm({
  "node_modules/@mui/material/Paper/Paper.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_base();
    init_esm2();
    init_styled();
    init_getOverlayAlpha();
    init_useThemeProps();
    init_useTheme();
    init_paperClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    _excluded = ["className", "component", "elevation", "square", "variant"];
    useUtilityClasses = (ownerState) => {
      const {
        square,
        elevation,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
      };
      return composeClasses(slots, getPaperUtilityClass, classes);
    };
    PaperRoot = styled_default("div", {
      name: "MuiPaper",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], !ownerState.square && styles2.rounded, ownerState.variant === "elevation" && styles2[`elevation${ownerState.elevation}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$vars$overlays;
      return _extends({
        backgroundColor: (theme.vars || theme).palette.background.paper,
        color: (theme.vars || theme).palette.text.primary,
        transition: theme.transitions.create("box-shadow")
      }, !ownerState.square && {
        borderRadius: theme.shape.borderRadius
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.divider}`
      }, ownerState.variant === "elevation" && _extends({
        boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
      }, !theme.vars && theme.palette.mode === "dark" && {
        backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha_default(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha_default(ownerState.elevation))})`
      }, theme.vars && {
        backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
      }));
    });
    Paper = React.forwardRef(function Paper2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPaper"
      });
      const {
        className,
        component = "div",
        elevation = 1,
        square = false,
        variant = "elevation"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const ownerState = _extends({}, props, {
        component,
        elevation,
        square,
        variant
      });
      const classes = useUtilityClasses(ownerState);
      if (true) {
        const theme = useTheme();
        if (theme.shadows[elevation] === void 0) {
          console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
        }
      }
      return (0, import_jsx_runtime.jsx)(PaperRoot, _extends({
        as: component,
        ownerState,
        className: clsx_m_default(classes.root, className),
        ref
      }, other));
    });
    true ? Paper.propTypes = {
      children: import_prop_types.default.node,
      classes: import_prop_types.default.object,
      className: import_prop_types.default.string,
      component: import_prop_types.default.elementType,
      elevation: chainPropTypes(integerPropType_default, (props) => {
        const {
          elevation,
          variant
        } = props;
        if (elevation > 0 && variant === "outlined") {
          return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
        }
        return null;
      }),
      square: import_prop_types.default.bool,
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
      variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["elevation", "outlined"]), import_prop_types.default.string])
    } : void 0;
    Paper_default = Paper;
  }
});

// node_modules/@mui/material/Paper/index.js
var init_Paper2 = __esm({
  "node_modules/@mui/material/Paper/index.js"() {
    init_Paper();
    init_paperClasses();
    init_paperClasses();
  }
});

// node_modules/@mui/material/Typography/typographyClasses.js
function getTypographyUtilityClass(slot) {
  return generateUtilityClass("MuiTypography", slot);
}
var typographyClasses, typographyClasses_default;
var init_typographyClasses = __esm({
  "node_modules/@mui/material/Typography/typographyClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
    typographyClasses_default = typographyClasses;
  }
});

// node_modules/@mui/material/Typography/Typography.js
var React2, import_prop_types2, import_jsx_runtime2, _excluded2, useUtilityClasses2, TypographyRoot, defaultVariantMapping, colorTransformations, transformDeprecatedColors, Typography, Typography_default;
var init_Typography = __esm({
  "node_modules/@mui/material/Typography/Typography.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React2 = __toESM(require_react());
    import_prop_types2 = __toESM(require_prop_types());
    init_clsx_m();
    init_esm2();
    init_base();
    init_styled();
    init_useThemeProps();
    init_capitalize();
    init_typographyClasses();
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    _excluded2 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
    useUtilityClasses2 = (ownerState) => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
      };
      return composeClasses(slots, getTypographyUtilityClass, classes);
    };
    TypographyRoot = styled_default("span", {
      name: "MuiTypography",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.variant && styles2[ownerState.variant], ownerState.align !== "inherit" && styles2[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles2.noWrap, ownerState.gutterBottom && styles2.gutterBottom, ownerState.paragraph && styles2.paragraph];
      }
    })(({
      theme,
      ownerState
    }) => _extends({
      margin: 0
    }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
      textAlign: ownerState.align
    }, ownerState.noWrap && {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    }, ownerState.gutterBottom && {
      marginBottom: "0.35em"
    }, ownerState.paragraph && {
      marginBottom: 16
    }));
    defaultVariantMapping = {
      h1: "h1",
      h2: "h2",
      h3: "h3",
      h4: "h4",
      h5: "h5",
      h6: "h6",
      subtitle1: "h6",
      subtitle2: "h6",
      body1: "p",
      body2: "p",
      inherit: "p"
    };
    colorTransformations = {
      primary: "primary.main",
      textPrimary: "text.primary",
      secondary: "secondary.main",
      textSecondary: "text.secondary",
      error: "error.main"
    };
    transformDeprecatedColors = (color) => {
      return colorTransformations[color] || color;
    };
    Typography = React2.forwardRef(function Typography2(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiTypography"
      });
      const color = transformDeprecatedColors(themeProps.color);
      const props = extendSxProp(_extends({}, themeProps, {
        color
      }));
      const {
        align = "inherit",
        className,
        component,
        gutterBottom = false,
        noWrap = false,
        paragraph = false,
        variant = "body1",
        variantMapping = defaultVariantMapping
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
      const ownerState = _extends({}, props, {
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      });
      const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
      const classes = useUtilityClasses2(ownerState);
      return (0, import_jsx_runtime2.jsx)(TypographyRoot, _extends({
        as: Component,
        ref,
        ownerState,
        className: clsx_m_default(classes.root, className)
      }, other));
    });
    true ? Typography.propTypes = {
      align: import_prop_types2.default.oneOf(["center", "inherit", "justify", "left", "right"]),
      children: import_prop_types2.default.node,
      classes: import_prop_types2.default.object,
      className: import_prop_types2.default.string,
      component: import_prop_types2.default.elementType,
      gutterBottom: import_prop_types2.default.bool,
      noWrap: import_prop_types2.default.bool,
      paragraph: import_prop_types2.default.bool,
      sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
      variant: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types2.default.string]),
      variantMapping: import_prop_types2.default.object
    } : void 0;
    Typography_default = Typography;
  }
});

// node_modules/@mui/material/Typography/index.js
var init_Typography2 = __esm({
  "node_modules/@mui/material/Typography/index.js"() {
    init_Typography();
    init_typographyClasses();
    init_typographyClasses();
  }
});

// node_modules/@mui/material/Popper/Popper.js
var import_prop_types3, React3, import_jsx_runtime3, _excluded3, PopperRoot, Popper, Popper_default;
var init_Popper = __esm({
  "node_modules/@mui/material/Popper/Popper.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_PopperUnstyled();
    init_esm2();
    init_esm();
    import_prop_types3 = __toESM(require_prop_types());
    React3 = __toESM(require_react());
    init_styles();
    import_jsx_runtime3 = __toESM(require_jsx_runtime());
    _excluded3 = ["components", "componentsProps", "slots", "slotProps"];
    PopperRoot = styled_default(PopperUnstyled_default, {
      name: "MuiPopper",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    Popper = React3.forwardRef(function Popper2(inProps, ref) {
      var _slots$root;
      const theme = useThemeWithoutDefault_default();
      const props = useThemeProps({
        props: inProps,
        name: "MuiPopper"
      });
      const {
        components,
        componentsProps,
        slots,
        slotProps
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
      const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
      return (0, import_jsx_runtime3.jsx)(PopperRoot, _extends({
        direction: theme == null ? void 0 : theme.direction,
        slots: {
          root: RootComponent
        },
        slotProps: slotProps != null ? slotProps : componentsProps
      }, other, {
        ref
      }));
    });
    true ? Popper.propTypes = {
      anchorEl: import_prop_types3.default.oneOfType([HTMLElementType, import_prop_types3.default.object, import_prop_types3.default.func]),
      children: import_prop_types3.default.oneOfType([import_prop_types3.default.node, import_prop_types3.default.func]),
      component: import_prop_types3.default.elementType,
      components: import_prop_types3.default.shape({
        Root: import_prop_types3.default.elementType
      }),
      componentsProps: import_prop_types3.default.shape({
        root: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
      }),
      container: import_prop_types3.default.oneOfType([HTMLElementType, import_prop_types3.default.func]),
      disablePortal: import_prop_types3.default.bool,
      keepMounted: import_prop_types3.default.bool,
      modifiers: import_prop_types3.default.arrayOf(import_prop_types3.default.shape({
        data: import_prop_types3.default.object,
        effect: import_prop_types3.default.func,
        enabled: import_prop_types3.default.bool,
        fn: import_prop_types3.default.func,
        name: import_prop_types3.default.any,
        options: import_prop_types3.default.object,
        phase: import_prop_types3.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
        requires: import_prop_types3.default.arrayOf(import_prop_types3.default.string),
        requiresIfExists: import_prop_types3.default.arrayOf(import_prop_types3.default.string)
      })),
      open: import_prop_types3.default.bool.isRequired,
      ownerState: import_prop_types3.default.any,
      placement: import_prop_types3.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      popperOptions: import_prop_types3.default.shape({
        modifiers: import_prop_types3.default.array,
        onFirstUpdate: import_prop_types3.default.func,
        placement: import_prop_types3.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        strategy: import_prop_types3.default.oneOf(["absolute", "fixed"])
      }),
      popperRef: refType_default,
      slotProps: import_prop_types3.default.shape({
        root: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
      }),
      slots: import_prop_types3.default.shape({
        root: import_prop_types3.default.elementType
      }),
      sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object]),
      transition: import_prop_types3.default.bool
    } : void 0;
    Popper_default = Popper;
  }
});

// node_modules/@mui/material/Popper/index.js
var init_Popper2 = __esm({
  "node_modules/@mui/material/Popper/index.js"() {
    init_Popper();
  }
});

// node_modules/@mui/material/Chip/chipClasses.js
function getChipUtilityClass(slot) {
  return generateUtilityClass("MuiChip", slot);
}
var chipClasses, chipClasses_default;
var init_chipClasses = __esm({
  "node_modules/@mui/material/Chip/chipClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
    chipClasses_default = chipClasses;
  }
});

// node_modules/@mui/material/internal/svg-icons/Cancel.js
var React4, import_jsx_runtime4, Cancel_default;
var init_Cancel = __esm({
  "node_modules/@mui/material/internal/svg-icons/Cancel.js"() {
    React4 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime4 = __toESM(require_jsx_runtime());
    Cancel_default = createSvgIcon((0, import_jsx_runtime4.jsx)("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), "Cancel");
  }
});

// node_modules/@mui/material/Chip/Chip.js
function isDeleteKeyboardEvent(keyboardEvent) {
  return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
}
var React5, import_prop_types4, import_jsx_runtime5, import_jsx_runtime6, _excluded4, useUtilityClasses3, ChipRoot, ChipLabel, Chip, Chip_default;
var init_Chip = __esm({
  "node_modules/@mui/material/Chip/Chip.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React5 = __toESM(require_react());
    import_prop_types4 = __toESM(require_prop_types());
    init_clsx_m();
    init_base();
    init_esm2();
    init_Cancel();
    init_useForkRef();
    init_unsupportedProp();
    init_capitalize();
    init_ButtonBase();
    init_useThemeProps();
    init_styled();
    init_chipClasses();
    import_jsx_runtime5 = __toESM(require_jsx_runtime());
    import_jsx_runtime6 = __toESM(require_jsx_runtime());
    _excluded4 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
    useUtilityClasses3 = (ownerState) => {
      const {
        classes,
        disabled,
        size,
        color,
        iconColor,
        onDelete,
        clickable,
        variant
      } = ownerState;
      const slots = {
        root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color)}`, `${variant}${capitalize_default(color)}`],
        label: ["label", `label${capitalize_default(size)}`],
        avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color)}`],
        icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(iconColor)}`],
        deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color)}`]
      };
      return composeClasses(slots, getChipUtilityClass, classes);
    };
    ChipRoot = styled_default("div", {
      name: "MuiChip",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          color,
          iconColor,
          clickable,
          onDelete,
          size,
          variant
        } = ownerState;
        return [{
          [`& .${chipClasses_default.avatar}`]: styles2.avatar
        }, {
          [`& .${chipClasses_default.avatar}`]: styles2[`avatar${capitalize_default(size)}`]
        }, {
          [`& .${chipClasses_default.avatar}`]: styles2[`avatarColor${capitalize_default(color)}`]
        }, {
          [`& .${chipClasses_default.icon}`]: styles2.icon
        }, {
          [`& .${chipClasses_default.icon}`]: styles2[`icon${capitalize_default(size)}`]
        }, {
          [`& .${chipClasses_default.icon}`]: styles2[`iconColor${capitalize_default(iconColor)}`]
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles2.deleteIcon
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles2[`deleteIcon${capitalize_default(size)}`]
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles2[`deleteIconColor${capitalize_default(color)}`]
        }, {
          [`& .${chipClasses_default.deleteIcon}`]: styles2[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color)}`]
        }, styles2.root, styles2[`size${capitalize_default(size)}`], styles2[`color${capitalize_default(color)}`], clickable && styles2.clickable, clickable && color !== "default" && styles2[`clickableColor${capitalize_default(color)})`], onDelete && styles2.deletable, onDelete && color !== "default" && styles2[`deletableColor${capitalize_default(color)}`], styles2[variant], styles2[`${variant}${capitalize_default(color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const deleteIconColor = alpha(theme.palette.text.primary, 0.26);
      const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
      return _extends({
        maxWidth: "100%",
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(13),
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        height: 32,
        color: (theme.vars || theme).palette.text.primary,
        backgroundColor: (theme.vars || theme).palette.action.selected,
        borderRadius: 32 / 2,
        whiteSpace: "nowrap",
        transition: theme.transitions.create(["background-color", "box-shadow"]),
        cursor: "default",
        outline: 0,
        textDecoration: "none",
        border: 0,
        padding: 0,
        verticalAlign: "middle",
        boxSizing: "border-box",
        [`&.${chipClasses_default.disabled}`]: {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`& .${chipClasses_default.avatar}`]: {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
          fontSize: theme.typography.pxToRem(12)
        },
        [`& .${chipClasses_default.avatarColorPrimary}`]: {
          color: (theme.vars || theme).palette.primary.contrastText,
          backgroundColor: (theme.vars || theme).palette.primary.dark
        },
        [`& .${chipClasses_default.avatarColorSecondary}`]: {
          color: (theme.vars || theme).palette.secondary.contrastText,
          backgroundColor: (theme.vars || theme).palette.secondary.dark
        },
        [`& .${chipClasses_default.avatarSmall}`]: {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme.typography.pxToRem(10)
        },
        [`& .${chipClasses_default.icon}`]: _extends({
          marginLeft: 5,
          marginRight: -6
        }, ownerState.size === "small" && {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        }, ownerState.iconColor === ownerState.color && _extends({
          color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
        }, ownerState.color !== "default" && {
          color: "inherit"
        })),
        [`& .${chipClasses_default.deleteIcon}`]: _extends({
          WebkitTapHighlightColor: "transparent",
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : deleteIconColor,
          fontSize: 22,
          cursor: "pointer",
          margin: "0 5px 0 -6px",
          "&:hover": {
            color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(deleteIconColor, 0.4)
          }
        }, ownerState.size === "small" && {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }, ownerState.color !== "default" && {
          color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
          "&:hover, &:active": {
            color: (theme.vars || theme).palette[ownerState.color].contrastText
          }
        })
      }, ownerState.size === "small" && {
        height: 24
      }, ownerState.color !== "default" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
        color: (theme.vars || theme).palette[ownerState.color].contrastText
      }, ownerState.onDelete && {
        [`&.${chipClasses_default.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }, ownerState.onDelete && ownerState.color !== "default" && {
        [`&.${chipClasses_default.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
        }
      });
    }, ({
      theme,
      ownerState
    }) => _extends({}, ownerState.clickable && {
      userSelect: "none",
      WebkitTapHighlightColor: "transparent",
      cursor: "pointer",
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      "&:active": {
        boxShadow: (theme.vars || theme).shadows[1]
      }
    }, ownerState.clickable && ownerState.color !== "default" && {
      [`&:hover, &.${chipClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    }), ({
      theme,
      ownerState
    }) => _extends({}, ownerState.variant === "outlined" && {
      backgroundColor: "transparent",
      border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
      [`&.${chipClasses_default.clickable}:hover`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses_default.icon}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses_default.iconSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses_default.deleteIcon}`]: {
        marginRight: 5
      },
      [`& .${chipClasses_default.deleteIconSmall}`]: {
        marginRight: 3
      }
    }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
      [`&.${chipClasses_default.clickable}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
      },
      [`& .${chipClasses_default.deleteIcon}`]: {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].main
        }
      }
    }));
    ChipLabel = styled_default("span", {
      name: "MuiChip",
      slot: "Label",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          size
        } = ownerState;
        return [styles2.label, styles2[`label${capitalize_default(size)}`]];
      }
    })(({
      ownerState
    }) => _extends({
      overflow: "hidden",
      textOverflow: "ellipsis",
      paddingLeft: 12,
      paddingRight: 12,
      whiteSpace: "nowrap"
    }, ownerState.size === "small" && {
      paddingLeft: 8,
      paddingRight: 8
    }));
    Chip = React5.forwardRef(function Chip2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiChip"
      });
      const {
        avatar: avatarProp,
        className,
        clickable: clickableProp,
        color = "default",
        component: ComponentProp,
        deleteIcon: deleteIconProp,
        disabled = false,
        icon: iconProp,
        label,
        onClick,
        onDelete,
        onKeyDown,
        onKeyUp,
        size = "medium",
        variant = "filled",
        tabIndex,
        skipFocusWhenDisabled = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
      const chipRef = React5.useRef(null);
      const handleRef = useForkRef_default(chipRef, ref);
      const handleDeleteIconClick = (event) => {
        event.stopPropagation();
        if (onDelete) {
          onDelete(event);
        }
      };
      const handleKeyDown = (event) => {
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleKeyUp = (event) => {
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          } else if (event.key === "Escape" && chipRef.current) {
            chipRef.current.blur();
          }
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
      };
      const clickable = clickableProp !== false && onClick ? true : clickableProp;
      const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
      const ownerState = _extends({}, props, {
        component,
        disabled,
        size,
        color,
        iconColor: React5.isValidElement(iconProp) ? iconProp.props.color || color : color,
        onDelete: !!onDelete,
        clickable,
        variant
      });
      const classes = useUtilityClasses3(ownerState);
      const moreProps = component === ButtonBase_default ? _extends({
        component: ComponentProp || "div",
        focusVisibleClassName: classes.focusVisible
      }, onDelete && {
        disableRipple: true
      }) : {};
      let deleteIcon = null;
      if (onDelete) {
        deleteIcon = deleteIconProp && React5.isValidElement(deleteIconProp) ? React5.cloneElement(deleteIconProp, {
          className: clsx_m_default(deleteIconProp.props.className, classes.deleteIcon),
          onClick: handleDeleteIconClick
        }) : (0, import_jsx_runtime5.jsx)(Cancel_default, {
          className: clsx_m_default(classes.deleteIcon),
          onClick: handleDeleteIconClick
        });
      }
      let avatar = null;
      if (avatarProp && React5.isValidElement(avatarProp)) {
        avatar = React5.cloneElement(avatarProp, {
          className: clsx_m_default(classes.avatar, avatarProp.props.className)
        });
      }
      let icon = null;
      if (iconProp && React5.isValidElement(iconProp)) {
        icon = React5.cloneElement(iconProp, {
          className: clsx_m_default(classes.icon, iconProp.props.className)
        });
      }
      if (true) {
        if (avatar && icon) {
          console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
        }
      }
      return (0, import_jsx_runtime6.jsxs)(ChipRoot, _extends({
        as: component,
        className: clsx_m_default(classes.root, className),
        disabled: clickable && disabled ? true : void 0,
        onClick,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        ref: handleRef,
        tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
        ownerState
      }, moreProps, other, {
        children: [avatar || icon, (0, import_jsx_runtime5.jsx)(ChipLabel, {
          className: clsx_m_default(classes.label),
          ownerState,
          children: label
        }), deleteIcon]
      }));
    });
    true ? Chip.propTypes = {
      avatar: import_prop_types4.default.element,
      children: unsupportedProp_default,
      classes: import_prop_types4.default.object,
      className: import_prop_types4.default.string,
      clickable: import_prop_types4.default.bool,
      color: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types4.default.string]),
      component: import_prop_types4.default.elementType,
      deleteIcon: import_prop_types4.default.element,
      disabled: import_prop_types4.default.bool,
      icon: import_prop_types4.default.element,
      label: import_prop_types4.default.node,
      onClick: import_prop_types4.default.func,
      onDelete: import_prop_types4.default.func,
      onKeyDown: import_prop_types4.default.func,
      onKeyUp: import_prop_types4.default.func,
      size: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["medium", "small"]), import_prop_types4.default.string]),
      skipFocusWhenDisabled: import_prop_types4.default.bool,
      sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object]),
      tabIndex: import_prop_types4.default.number,
      variant: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["filled", "outlined"]), import_prop_types4.default.string])
    } : void 0;
    Chip_default = Chip;
  }
});

// node_modules/@mui/material/Chip/index.js
var init_Chip2 = __esm({
  "node_modules/@mui/material/Chip/index.js"() {
    init_Chip();
    init_chipClasses();
    init_chipClasses();
  }
});

// node_modules/@mui/material/FormControl/FormControlContext.js
var React6, FormControlContext, FormControlContext_default;
var init_FormControlContext = __esm({
  "node_modules/@mui/material/FormControl/FormControlContext.js"() {
    React6 = __toESM(require_react());
    FormControlContext = React6.createContext(void 0);
    if (true) {
      FormControlContext.displayName = "FormControlContext";
    }
    FormControlContext_default = FormControlContext;
  }
});

// node_modules/@mui/material/FormControl/useFormControl.js
function useFormControl() {
  return React7.useContext(FormControlContext_default);
}
var React7;
var init_useFormControl = __esm({
  "node_modules/@mui/material/FormControl/useFormControl.js"() {
    React7 = __toESM(require_react());
    init_FormControlContext();
  }
});

// node_modules/@mui/material/InputBase/inputBaseClasses.js
function getInputBaseUtilityClass(slot) {
  return generateUtilityClass("MuiInputBase", slot);
}
var inputBaseClasses, inputBaseClasses_default;
var init_inputBaseClasses = __esm({
  "node_modules/@mui/material/InputBase/inputBaseClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
    inputBaseClasses_default = inputBaseClasses;
  }
});

// node_modules/@mui/material/FormControl/formControlState.js
function formControlState({
  props,
  states,
  muiFormControl
}) {
  return states.reduce((acc, state) => {
    acc[state] = props[state];
    if (muiFormControl) {
      if (typeof props[state] === "undefined") {
        acc[state] = muiFormControl[state];
      }
    }
    return acc;
  }, {});
}
var init_formControlState = __esm({
  "node_modules/@mui/material/FormControl/formControlState.js"() {
  }
});

// node_modules/@mui/material/InputBase/utils.js
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0);
}
function isFilled(obj, SSR = false) {
  return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
}
function isAdornedStart(obj) {
  return obj.startAdornment;
}
var init_utils = __esm({
  "node_modules/@mui/material/InputBase/utils.js"() {
  }
});

// node_modules/@mui/material/InputBase/InputBase.js
var React8, import_prop_types5, import_jsx_runtime7, import_jsx_runtime8, _excluded5, rootOverridesResolver, inputOverridesResolver, useUtilityClasses4, InputBaseRoot, InputBaseComponent, inputGlobalStyles, InputBase, InputBase_default;
var init_InputBase = __esm({
  "node_modules/@mui/material/InputBase/InputBase.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_esm();
    React8 = __toESM(require_react());
    import_prop_types5 = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_base();
    init_formControlState();
    init_FormControlContext();
    init_useFormControl();
    init_styled();
    init_useThemeProps();
    init_capitalize();
    init_useForkRef();
    init_useEnhancedEffect();
    init_GlobalStyles();
    init_utils();
    init_inputBaseClasses();
    import_jsx_runtime7 = __toESM(require_jsx_runtime());
    import_jsx_runtime8 = __toESM(require_jsx_runtime());
    _excluded5 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
    rootOverridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.formControl && styles2.formControl, ownerState.startAdornment && styles2.adornedStart, ownerState.endAdornment && styles2.adornedEnd, ownerState.error && styles2.error, ownerState.size === "small" && styles2.sizeSmall, ownerState.multiline && styles2.multiline, ownerState.color && styles2[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles2.fullWidth, ownerState.hiddenLabel && styles2.hiddenLabel];
    };
    inputOverridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.input, ownerState.size === "small" && styles2.inputSizeSmall, ownerState.multiline && styles2.inputMultiline, ownerState.type === "search" && styles2.inputTypeSearch, ownerState.startAdornment && styles2.inputAdornedStart, ownerState.endAdornment && styles2.inputAdornedEnd, ownerState.hiddenLabel && styles2.inputHiddenLabel];
    };
    useUtilityClasses4 = (ownerState) => {
      const {
        classes,
        color,
        disabled,
        error,
        endAdornment,
        focused,
        formControl,
        fullWidth,
        hiddenLabel,
        multiline,
        readOnly,
        size,
        startAdornment,
        type
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize_default(color)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
        input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
      };
      return composeClasses(slots, getInputBaseUtilityClass, classes);
    };
    InputBaseRoot = styled_default("div", {
      name: "MuiInputBase",
      slot: "Root",
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends({}, theme.typography.body1, {
      color: (theme.vars || theme).palette.text.primary,
      lineHeight: "1.4375em",
      boxSizing: "border-box",
      position: "relative",
      cursor: "text",
      display: "inline-flex",
      alignItems: "center",
      [`&.${inputBaseClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled,
        cursor: "default"
      }
    }, ownerState.multiline && _extends({
      padding: "4px 0 5px"
    }, ownerState.size === "small" && {
      paddingTop: 1
    }), ownerState.fullWidth && {
      width: "100%"
    }));
    InputBaseComponent = styled_default("input", {
      name: "MuiInputBase",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const light = theme.palette.mode === "light";
      const placeholder = _extends({
        color: "currentColor"
      }, theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light ? 0.42 : 0.5
      }, {
        transition: theme.transitions.create("opacity", {
          duration: theme.transitions.duration.shorter
        })
      });
      const placeholderHidden = {
        opacity: "0 !important"
      };
      const placeholderVisible = theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light ? 0.42 : 0.5
      };
      return _extends({
        font: "inherit",
        letterSpacing: "inherit",
        color: "currentColor",
        padding: "4px 0 5px",
        border: 0,
        boxSizing: "content-box",
        background: "none",
        height: "1.4375em",
        margin: 0,
        WebkitTapHighlightColor: "transparent",
        display: "block",
        minWidth: 0,
        width: "100%",
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&::-webkit-input-placeholder": placeholder,
        "&::-moz-placeholder": placeholder,
        "&:-ms-input-placeholder": placeholder,
        "&::-ms-input-placeholder": placeholder,
        "&:focus": {
          outline: 0
        },
        "&:invalid": {
          boxShadow: "none"
        },
        "&::-webkit-search-decoration": {
          WebkitAppearance: "none"
        },
        [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
          "&::-webkit-input-placeholder": placeholderHidden,
          "&::-moz-placeholder": placeholderHidden,
          "&:-ms-input-placeholder": placeholderHidden,
          "&::-ms-input-placeholder": placeholderHidden,
          "&:focus::-webkit-input-placeholder": placeholderVisible,
          "&:focus::-moz-placeholder": placeholderVisible,
          "&:focus:-ms-input-placeholder": placeholderVisible,
          "&:focus::-ms-input-placeholder": placeholderVisible
        },
        [`&.${inputBaseClasses_default.disabled}`]: {
          opacity: 1,
          WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        },
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      }, ownerState.size === "small" && {
        paddingTop: 1
      }, ownerState.multiline && {
        height: "auto",
        resize: "none",
        padding: 0,
        paddingTop: 0
      }, ownerState.type === "search" && {
        MozAppearance: "textfield"
      });
    });
    inputGlobalStyles = (0, import_jsx_runtime7.jsx)(GlobalStyles_default, {
      styles: {
        "@keyframes mui-auto-fill": {
          from: {
            display: "block"
          }
        },
        "@keyframes mui-auto-fill-cancel": {
          from: {
            display: "block"
          }
        }
      }
    });
    InputBase = React8.forwardRef(function InputBase2(inProps, ref) {
      var _slotProps$input;
      const props = useThemeProps({
        props: inProps,
        name: "MuiInputBase"
      });
      const {
        "aria-describedby": ariaDescribedby,
        autoComplete,
        autoFocus,
        className,
        components = {},
        componentsProps = {},
        defaultValue,
        disabled,
        disableInjectingGlobalStyles,
        endAdornment,
        fullWidth = false,
        id,
        inputComponent = "input",
        inputProps: inputPropsProp = {},
        inputRef: inputRefProp,
        maxRows,
        minRows,
        multiline = false,
        name,
        onBlur,
        onChange,
        onClick,
        onFocus,
        onKeyDown,
        onKeyUp,
        placeholder,
        readOnly,
        renderSuffix,
        rows,
        slotProps = {},
        slots = {},
        startAdornment,
        type = "text",
        value: valueProp
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
      const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
      const {
        current: isControlled
      } = React8.useRef(value != null);
      const inputRef = React8.useRef();
      const handleInputRefWarning = React8.useCallback((instance) => {
        if (true) {
          if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
            console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
          }
        }
      }, []);
      const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
      const [focused, setFocused] = React8.useState(false);
      const muiFormControl = useFormControl();
      if (true) {
        React8.useEffect(() => {
          if (muiFormControl) {
            return muiFormControl.registerEffect();
          }
          return void 0;
        }, [muiFormControl]);
      }
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused;
      React8.useEffect(() => {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);
          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      const onFilled = muiFormControl && muiFormControl.onFilled;
      const onEmpty = muiFormControl && muiFormControl.onEmpty;
      const checkDirty = React8.useCallback((obj) => {
        if (isFilled(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      useEnhancedEffect_default(() => {
        if (isControlled) {
          checkDirty({
            value
          });
        }
      }, [value, checkDirty, isControlled]);
      const handleFocus = (event) => {
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }
        if (onFocus) {
          onFocus(event);
        }
        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };
      const handleChange = (event, ...args) => {
        if (!isControlled) {
          const element = event.target || inputRef.current;
          if (element == null) {
            throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(1));
          }
          checkDirty({
            value: element.value
          });
        }
        if (inputPropsProp.onChange) {
          inputPropsProp.onChange(event, ...args);
        }
        if (onChange) {
          onChange(event, ...args);
        }
      };
      React8.useEffect(() => {
        checkDirty(inputRef.current);
      }, []);
      const handleClick = (event) => {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }
        if (onClick) {
          onClick(event);
        }
      };
      let InputComponent = inputComponent;
      let inputProps = inputPropsProp;
      if (multiline && InputComponent === "input") {
        if (rows) {
          if (true) {
            if (minRows || maxRows) {
              console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
            }
          }
          inputProps = _extends({
            type: void 0,
            minRows: rows,
            maxRows: rows
          }, inputProps);
        } else {
          inputProps = _extends({
            type: void 0,
            maxRows,
            minRows
          }, inputProps);
        }
        InputComponent = TextareaAutosize_default;
      }
      const handleAutoFill = (event) => {
        checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
          value: "x"
        });
      };
      React8.useEffect(() => {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      const ownerState = _extends({}, props, {
        color: fcs.color || "primary",
        disabled: fcs.disabled,
        endAdornment,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        startAdornment,
        type
      });
      const classes = useUtilityClasses4(ownerState);
      const Root = slots.root || components.Root || InputBaseRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const Input = slots.input || components.Input || InputBaseComponent;
      inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
      return (0, import_jsx_runtime8.jsxs)(React8.Fragment, {
        children: [!disableInjectingGlobalStyles && inputGlobalStyles, (0, import_jsx_runtime8.jsxs)(Root, _extends({}, rootProps, !isHostComponent(Root) && {
          ownerState: _extends({}, ownerState, rootProps.ownerState)
        }, {
          ref,
          onClick: handleClick
        }, other, {
          className: clsx_m_default(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
          children: [startAdornment, (0, import_jsx_runtime7.jsx)(FormControlContext_default.Provider, {
            value: null,
            children: (0, import_jsx_runtime7.jsx)(Input, _extends({
              ownerState,
              "aria-invalid": fcs.error,
              "aria-describedby": ariaDescribedby,
              autoComplete,
              autoFocus,
              defaultValue,
              disabled: fcs.disabled,
              id,
              onAnimationStart: handleAutoFill,
              name,
              placeholder,
              readOnly,
              required: fcs.required,
              rows,
              value,
              onKeyDown,
              onKeyUp,
              type
            }, inputProps, !isHostComponent(Input) && {
              as: InputComponent,
              ownerState: _extends({}, ownerState, inputProps.ownerState)
            }, {
              ref: handleInputRef,
              className: clsx_m_default(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: handleFocus
            }))
          }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
            startAdornment
          })) : null]
        }))]
      });
    });
    true ? InputBase.propTypes = {
      "aria-describedby": import_prop_types5.default.string,
      autoComplete: import_prop_types5.default.string,
      autoFocus: import_prop_types5.default.bool,
      classes: import_prop_types5.default.object,
      className: import_prop_types5.default.string,
      color: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types5.default.string]),
      components: import_prop_types5.default.shape({
        Input: import_prop_types5.default.elementType,
        Root: import_prop_types5.default.elementType
      }),
      componentsProps: import_prop_types5.default.shape({
        input: import_prop_types5.default.object,
        root: import_prop_types5.default.object
      }),
      defaultValue: import_prop_types5.default.any,
      disabled: import_prop_types5.default.bool,
      disableInjectingGlobalStyles: import_prop_types5.default.bool,
      endAdornment: import_prop_types5.default.node,
      error: import_prop_types5.default.bool,
      fullWidth: import_prop_types5.default.bool,
      id: import_prop_types5.default.string,
      inputComponent: elementTypeAcceptingRef_default,
      inputProps: import_prop_types5.default.object,
      inputRef: refType_default,
      margin: import_prop_types5.default.oneOf(["dense", "none"]),
      maxRows: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),
      minRows: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),
      multiline: import_prop_types5.default.bool,
      name: import_prop_types5.default.string,
      onBlur: import_prop_types5.default.func,
      onChange: import_prop_types5.default.func,
      onClick: import_prop_types5.default.func,
      onFocus: import_prop_types5.default.func,
      onInvalid: import_prop_types5.default.func,
      onKeyDown: import_prop_types5.default.func,
      onKeyUp: import_prop_types5.default.func,
      placeholder: import_prop_types5.default.string,
      readOnly: import_prop_types5.default.bool,
      renderSuffix: import_prop_types5.default.func,
      required: import_prop_types5.default.bool,
      rows: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string]),
      size: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["medium", "small"]), import_prop_types5.default.string]),
      slotProps: import_prop_types5.default.shape({
        input: import_prop_types5.default.object,
        root: import_prop_types5.default.object
      }),
      slots: import_prop_types5.default.shape({
        input: import_prop_types5.default.elementType,
        root: import_prop_types5.default.elementType
      }),
      startAdornment: import_prop_types5.default.node,
      sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
      type: import_prop_types5.default.string,
      value: import_prop_types5.default.any
    } : void 0;
    InputBase_default = InputBase;
  }
});

// node_modules/@mui/material/InputBase/index.js
var init_InputBase2 = __esm({
  "node_modules/@mui/material/InputBase/index.js"() {
    init_InputBase();
    init_inputBaseClasses();
    init_inputBaseClasses();
  }
});

// node_modules/@mui/material/Input/inputClasses.js
function getInputUtilityClass(slot) {
  return generateUtilityClass("MuiInput", slot);
}
var inputClasses, inputClasses_default;
var init_inputClasses = __esm({
  "node_modules/@mui/material/Input/inputClasses.js"() {
    init_extends();
    init_esm();
    init_generateUtilityClass();
    init_InputBase2();
    inputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
    inputClasses_default = inputClasses;
  }
});

// node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
function getOutlinedInputUtilityClass(slot) {
  return generateUtilityClass("MuiOutlinedInput", slot);
}
var outlinedInputClasses, outlinedInputClasses_default;
var init_outlinedInputClasses = __esm({
  "node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js"() {
    init_extends();
    init_esm();
    init_generateUtilityClass();
    init_InputBase2();
    outlinedInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
    outlinedInputClasses_default = outlinedInputClasses;
  }
});

// node_modules/@mui/material/FilledInput/filledInputClasses.js
function getFilledInputUtilityClass(slot) {
  return generateUtilityClass("MuiFilledInput", slot);
}
var filledInputClasses, filledInputClasses_default;
var init_filledInputClasses = __esm({
  "node_modules/@mui/material/FilledInput/filledInputClasses.js"() {
    init_extends();
    init_esm();
    init_generateUtilityClass();
    init_InputBase2();
    filledInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
    filledInputClasses_default = filledInputClasses;
  }
});

// node_modules/@mui/material/transitions/utils.js
function getTransitionProps(props, options) {
  var _style$transitionDura, _style$transitionTimi;
  const {
    timeout,
    easing,
    style = {}
  } = props;
  return {
    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === "object" ? easing[options.mode] : easing,
    delay: style.transitionDelay
  };
}
var reflow;
var init_utils2 = __esm({
  "node_modules/@mui/material/transitions/utils.js"() {
    reflow = (node) => node.scrollTop;
  }
});

// node_modules/@mui/material/Grow/Grow.js
function getScale(value) {
  return `scale(${value}, ${value ** 2})`;
}
var React9, import_prop_types6, import_jsx_runtime9, _excluded6, styles, isWebKit154, Grow, Grow_default;
var init_Grow = __esm({
  "node_modules/@mui/material/Grow/Grow.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    React9 = __toESM(require_react());
    import_prop_types6 = __toESM(require_prop_types());
    init_esm();
    init_esm3();
    init_useTheme();
    init_utils2();
    init_useForkRef();
    import_jsx_runtime9 = __toESM(require_jsx_runtime());
    _excluded6 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    styles = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: "none"
      }
    };
    isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
    Grow = React9.forwardRef(function Grow2(props, ref) {
      const {
        addEndListener,
        appear = true,
        children,
        easing,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style,
        timeout = "auto",
        TransitionComponent = Transition_default
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
      const timer = React9.useRef();
      const autoTimeout = React9.useRef();
      const theme = useTheme();
      const nodeRef = React9.useRef(null);
      const handleRef = useForkRef_default(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node);
          } else {
            callback(node, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
        reflow(node);
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: "enter"
        });
        let duration;
        if (timeout === "auto") {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [theme.transitions.create("opacity", {
          duration,
          delay
        }), theme.transitions.create("transform", {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay,
          easing: transitionTimingFunction
        })].join(",");
        if (onEnter) {
          onEnter(node, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node) => {
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style,
          timeout,
          easing
        }, {
          mode: "exit"
        });
        let duration;
        if (timeout === "auto") {
          duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
          autoTimeout.current = duration;
        } else {
          duration = transitionDuration;
        }
        node.style.transition = [theme.transitions.create("opacity", {
          duration,
          delay
        }), theme.transitions.create("transform", {
          duration: isWebKit154 ? duration : duration * 0.666,
          delay: isWebKit154 ? delay : delay || duration * 0.333,
          easing: transitionTimingFunction
        })].join(",");
        node.style.opacity = 0;
        node.style.transform = getScale(0.75);
        if (onExit) {
          onExit(node);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = (next) => {
        if (timeout === "auto") {
          timer.current = setTimeout(next, autoTimeout.current || 0);
        }
        if (addEndListener) {
          addEndListener(nodeRef.current, next);
        }
      };
      React9.useEffect(() => {
        return () => {
          clearTimeout(timer.current);
        };
      }, []);
      return (0, import_jsx_runtime9.jsx)(TransitionComponent, _extends({
        appear,
        in: inProp,
        nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === "auto" ? null : timeout
      }, other, {
        children: (state, childProps) => {
          return React9.cloneElement(children, _extends({
            style: _extends({
              opacity: 0,
              transform: getScale(0.75),
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles[state], style, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    true ? Grow.propTypes = {
      addEndListener: import_prop_types6.default.func,
      appear: import_prop_types6.default.bool,
      children: elementAcceptingRef_default.isRequired,
      easing: import_prop_types6.default.oneOfType([import_prop_types6.default.shape({
        enter: import_prop_types6.default.string,
        exit: import_prop_types6.default.string
      }), import_prop_types6.default.string]),
      in: import_prop_types6.default.bool,
      onEnter: import_prop_types6.default.func,
      onEntered: import_prop_types6.default.func,
      onEntering: import_prop_types6.default.func,
      onExit: import_prop_types6.default.func,
      onExited: import_prop_types6.default.func,
      onExiting: import_prop_types6.default.func,
      style: import_prop_types6.default.object,
      timeout: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["auto"]), import_prop_types6.default.number, import_prop_types6.default.shape({
        appear: import_prop_types6.default.number,
        enter: import_prop_types6.default.number,
        exit: import_prop_types6.default.number
      })])
    } : void 0;
    Grow.muiSupportAuto = true;
    Grow_default = Grow;
  }
});

// node_modules/@mui/material/Grow/index.js
var init_Grow2 = __esm({
  "node_modules/@mui/material/Grow/index.js"() {
    init_Grow();
  }
});

// node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
var React10, import_jsx_runtime10, ArrowDropDown_default;
var init_ArrowDropDown = __esm({
  "node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js"() {
    React10 = __toESM(require_react());
    init_createSvgIcon();
    import_jsx_runtime10 = __toESM(require_jsx_runtime());
    ArrowDropDown_default = createSvgIcon((0, import_jsx_runtime10.jsx)("path", {
      d: "M7 10l5 5 5-5z"
    }), "ArrowDropDown");
  }
});

export {
  reflow,
  getTransitionProps,
  init_utils2 as init_utils,
  getPaperUtilityClass,
  paperClasses_default,
  Paper_default,
  init_Paper2 as init_Paper,
  getTypographyUtilityClass,
  typographyClasses_default,
  Typography_default,
  init_Typography2 as init_Typography,
  Popper_default,
  init_Popper2 as init_Popper,
  getChipUtilityClass,
  chipClasses_default,
  Chip_default,
  init_Chip2 as init_Chip,
  formControlState,
  init_formControlState,
  FormControlContext_default,
  init_FormControlContext,
  useFormControl,
  init_useFormControl,
  isFilled,
  isAdornedStart,
  init_utils as init_utils2,
  getInputBaseUtilityClass,
  inputBaseClasses_default,
  init_inputBaseClasses,
  rootOverridesResolver,
  inputOverridesResolver,
  InputBaseRoot,
  InputBaseComponent,
  InputBase_default,
  init_InputBase,
  init_InputBase2,
  getInputUtilityClass,
  inputClasses_default,
  init_inputClasses,
  getOutlinedInputUtilityClass,
  outlinedInputClasses_default,
  init_outlinedInputClasses,
  getFilledInputUtilityClass,
  filledInputClasses_default,
  init_filledInputClasses,
  ArrowDropDown_default,
  init_ArrowDropDown,
  Grow_default,
  init_Grow2 as init_Grow
};
//# sourceMappingURL=chunk-MYS7TTVO.js.map
