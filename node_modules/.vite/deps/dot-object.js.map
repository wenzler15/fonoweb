{
  "version": 3,
  "sources": ["../../dot-object/index.js"],
  "sourcesContent": ["'use strict'\n\nfunction _process (v, mod) {\n  var i\n  var r\n\n  if (typeof mod === 'function') {\n    r = mod(v)\n    if (r !== undefined) {\n      v = r\n    }\n  } else if (Array.isArray(mod)) {\n    for (i = 0; i < mod.length; i++) {\n      r = mod[i](v)\n      if (r !== undefined) {\n        v = r\n      }\n    }\n  }\n\n  return v\n}\n\nfunction parseKey (key, val) {\n  // detect negative index notation\n  if (key[0] === '-' && Array.isArray(val) && /^-\\d+$/.test(key)) {\n    return val.length + parseInt(key, 10)\n  }\n  return key\n}\n\nfunction isIndex (k) {\n  return /^\\d+$/.test(k)\n}\n\nfunction isObject (val) {\n  return Object.prototype.toString.call(val) === '[object Object]'\n}\n\nfunction isArrayOrObject (val) {\n  return Object(val) === val\n}\n\nfunction isEmptyObject (val) {\n  return Object.keys(val).length === 0\n}\n\nvar blacklist = ['__proto__', 'prototype', 'constructor']\nvar blacklistFilter = function (part) { return blacklist.indexOf(part) === -1 }\n\nfunction parsePath (path, sep) {\n  if (path.indexOf('[') >= 0) {\n    path = path.replace(/\\[/g, sep).replace(/]/g, '')\n  }\n\n  var parts = path.split(sep)\n\n  var check = parts.filter(blacklistFilter)\n\n  if (check.length !== parts.length) {\n    throw Error('Refusing to update blacklisted property ' + path)\n  }\n\n  return parts\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty\n\nfunction DotObject (separator, override, useArray, useBrackets) {\n  if (!(this instanceof DotObject)) {\n    return new DotObject(separator, override, useArray, useBrackets)\n  }\n\n  if (typeof override === 'undefined') override = false\n  if (typeof useArray === 'undefined') useArray = true\n  if (typeof useBrackets === 'undefined') useBrackets = true\n  this.separator = separator || '.'\n  this.override = override\n  this.useArray = useArray\n  this.useBrackets = useBrackets\n  this.keepArray = false\n\n  // contains touched arrays\n  this.cleanup = []\n}\n\nvar dotDefault = new DotObject('.', false, true, true)\nfunction wrap (method) {\n  return function () {\n    return dotDefault[method].apply(dotDefault, arguments)\n  }\n}\n\nDotObject.prototype._fill = function (a, obj, v, mod) {\n  var k = a.shift()\n\n  if (a.length > 0) {\n    obj[k] = obj[k] || (this.useArray && isIndex(a[0]) ? [] : {})\n\n    if (!isArrayOrObject(obj[k])) {\n      if (this.override) {\n        obj[k] = {}\n      } else {\n        if (!(isArrayOrObject(v) && isEmptyObject(v))) {\n          throw new Error(\n            'Trying to redefine `' + k + '` which is a ' + typeof obj[k]\n          )\n        }\n\n        return\n      }\n    }\n\n    this._fill(a, obj[k], v, mod)\n  } else {\n    if (!this.override && isArrayOrObject(obj[k]) && !isEmptyObject(obj[k])) {\n      if (!(isArrayOrObject(v) && isEmptyObject(v))) {\n        throw new Error(\"Trying to redefine non-empty obj['\" + k + \"']\")\n      }\n\n      return\n    }\n\n    obj[k] = _process(v, mod)\n  }\n}\n\n/**\n *\n * Converts an object with dotted-key/value pairs to it's expanded version\n *\n * Optionally transformed by a set of modifiers.\n *\n * Usage:\n *\n *   var row = {\n *     'nr': 200,\n *     'doc.name': '  My Document  '\n *   }\n *\n *   var mods = {\n *     'doc.name': [_s.trim, _s.underscored]\n *   }\n *\n *   dot.object(row, mods)\n *\n * @param {Object} obj\n * @param {Object} mods\n */\nDotObject.prototype.object = function (obj, mods) {\n  var self = this\n\n  Object.keys(obj).forEach(function (k) {\n    var mod = mods === undefined ? null : mods[k]\n    // normalize array notation.\n    var ok = parsePath(k, self.separator).join(self.separator)\n\n    if (ok.indexOf(self.separator) !== -1) {\n      self._fill(ok.split(self.separator), obj, obj[k], mod)\n      delete obj[k]\n    } else {\n      obj[k] = _process(obj[k], mod)\n    }\n  })\n\n  return obj\n}\n\n/**\n * @param {String} path dotted path\n * @param {String} v value to be set\n * @param {Object} obj object to be modified\n * @param {Function|Array} mod optional modifier\n */\nDotObject.prototype.str = function (path, v, obj, mod) {\n  var ok = parsePath(path, this.separator).join(this.separator)\n\n  if (path.indexOf(this.separator) !== -1) {\n    this._fill(ok.split(this.separator), obj, v, mod)\n  } else {\n    obj[path] = _process(v, mod)\n  }\n\n  return obj\n}\n\n/**\n *\n * Pick a value from an object using dot notation.\n *\n * Optionally remove the value\n *\n * @param {String} path\n * @param {Object} obj\n * @param {Boolean} remove\n */\nDotObject.prototype.pick = function (path, obj, remove, reindexArray) {\n  var i\n  var keys\n  var val\n  var key\n  var cp\n\n  keys = parsePath(path, this.separator)\n  for (i = 0; i < keys.length; i++) {\n    key = parseKey(keys[i], obj)\n    if (obj && typeof obj === 'object' && key in obj) {\n      if (i === keys.length - 1) {\n        if (remove) {\n          val = obj[key]\n          if (reindexArray && Array.isArray(obj)) {\n            obj.splice(key, 1)\n          } else {\n            delete obj[key]\n          }\n          if (Array.isArray(obj)) {\n            cp = keys.slice(0, -1).join('.')\n            if (this.cleanup.indexOf(cp) === -1) {\n              this.cleanup.push(cp)\n            }\n          }\n          return val\n        } else {\n          return obj[key]\n        }\n      } else {\n        obj = obj[key]\n      }\n    } else {\n      return undefined\n    }\n  }\n  if (remove && Array.isArray(obj)) {\n    obj = obj.filter(function (n) {\n      return n !== undefined\n    })\n  }\n  return obj\n}\n/**\n *\n * Delete value from an object using dot notation.\n *\n * @param {String} path\n * @param {Object} obj\n * @return {any} The removed value\n */\nDotObject.prototype.delete = function (path, obj) {\n  return this.remove(path, obj, true)\n}\n\n/**\n *\n * Remove value from an object using dot notation.\n *\n * Will remove multiple items if path is an array.\n * In this case array indexes will be retained until all\n * removals have been processed.\n *\n * Use dot.delete() to automatically  re-index arrays.\n *\n * @param {String|Array<String>} path\n * @param {Object} obj\n * @param {Boolean} reindexArray\n * @return {any} The removed value\n */\nDotObject.prototype.remove = function (path, obj, reindexArray) {\n  var i\n\n  this.cleanup = []\n  if (Array.isArray(path)) {\n    for (i = 0; i < path.length; i++) {\n      this.pick(path[i], obj, true, reindexArray)\n    }\n    if (!reindexArray) {\n      this._cleanup(obj)\n    }\n    return obj\n  } else {\n    return this.pick(path, obj, true, reindexArray)\n  }\n}\n\nDotObject.prototype._cleanup = function (obj) {\n  var ret\n  var i\n  var keys\n  var root\n  if (this.cleanup.length) {\n    for (i = 0; i < this.cleanup.length; i++) {\n      keys = this.cleanup[i].split('.')\n      root = keys.splice(0, -1).join('.')\n      ret = root ? this.pick(root, obj) : obj\n      ret = ret[keys[0]].filter(function (v) {\n        return v !== undefined\n      })\n      this.set(this.cleanup[i], ret, obj)\n    }\n    this.cleanup = []\n  }\n}\n\n/**\n * Alias method  for `dot.remove`\n *\n * Note: this is not an alias for dot.delete()\n *\n * @param {String|Array<String>} path\n * @param {Object} obj\n * @param {Boolean} reindexArray\n * @return {any} The removed value\n */\nDotObject.prototype.del = DotObject.prototype.remove\n\n/**\n *\n * Move a property from one place to the other.\n *\n * If the source path does not exist (undefined)\n * the target property will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\nDotObject.prototype.move = function (source, target, obj, mods, merge) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(target, _process(this.pick(source, obj, true), mods), obj, merge)\n  } else {\n    merge = mods\n    this.set(target, this.pick(source, obj, true), obj, merge)\n  }\n\n  return obj\n}\n\n/**\n *\n * Transfer a property from one object to another object.\n *\n * If the source path does not exist (undefined)\n * the property on the other object will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj1\n * @param {Object} obj2\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\nDotObject.prototype.transfer = function (\n  source,\n  target,\n  obj1,\n  obj2,\n  mods,\n  merge\n) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(\n      target,\n      _process(this.pick(source, obj1, true), mods),\n      obj2,\n      merge\n    )\n  } else {\n    merge = mods\n    this.set(target, this.pick(source, obj1, true), obj2, merge)\n  }\n\n  return obj2\n}\n\n/**\n *\n * Copy a property from one object to another object.\n *\n * If the source path does not exist (undefined)\n * the property on the other object will not be set.\n *\n * @param {String} source\n * @param {String} target\n * @param {Object} obj1\n * @param {Object} obj2\n * @param {Function|Array} mods\n * @param {Boolean} merge\n */\nDotObject.prototype.copy = function (source, target, obj1, obj2, mods, merge) {\n  if (typeof mods === 'function' || Array.isArray(mods)) {\n    this.set(\n      target,\n      _process(\n        // clone what is picked\n        JSON.parse(JSON.stringify(this.pick(source, obj1, false))),\n        mods\n      ),\n      obj2,\n      merge\n    )\n  } else {\n    merge = mods\n    this.set(target, this.pick(source, obj1, false), obj2, merge)\n  }\n\n  return obj2\n}\n\n/**\n *\n * Set a property on an object using dot notation.\n *\n * @param {String} path\n * @param {any} val\n * @param {Object} obj\n * @param {Boolean} merge\n */\nDotObject.prototype.set = function (path, val, obj, merge) {\n  var i\n  var k\n  var keys\n  var key\n\n  // Do not operate if the value is undefined.\n  if (typeof val === 'undefined') {\n    return obj\n  }\n  keys = parsePath(path, this.separator)\n\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i]\n    if (i === keys.length - 1) {\n      if (merge && isObject(val) && isObject(obj[key])) {\n        for (k in val) {\n          if (hasOwnProperty.call(val, k)) {\n            obj[key][k] = val[k]\n          }\n        }\n      } else if (merge && Array.isArray(obj[key]) && Array.isArray(val)) {\n        for (var j = 0; j < val.length; j++) {\n          obj[keys[i]].push(val[j])\n        }\n      } else {\n        obj[key] = val\n      }\n    } else if (\n      // force the value to be an object\n      !hasOwnProperty.call(obj, key) ||\n      (!isObject(obj[key]) && !Array.isArray(obj[key]))\n    ) {\n      // initialize as array if next key is numeric\n      if (/^\\d+$/.test(keys[i + 1])) {\n        obj[key] = []\n      } else {\n        obj[key] = {}\n      }\n    }\n    obj = obj[key]\n  }\n  return obj\n}\n\n/**\n *\n * Transform an object\n *\n * Usage:\n *\n *   var obj = {\n *     \"id\": 1,\n *    \"some\": {\n *      \"thing\": \"else\"\n *    }\n *   }\n *\n *   var transform = {\n *     \"id\": \"nr\",\n *    \"some.thing\": \"name\"\n *   }\n *\n *   var tgt = dot.transform(transform, obj)\n *\n * @param {Object} recipe Transform recipe\n * @param {Object} obj Object to be transformed\n * @param {Array} mods modifiers for the target\n */\nDotObject.prototype.transform = function (recipe, obj, tgt) {\n  obj = obj || {}\n  tgt = tgt || {}\n  Object.keys(recipe).forEach(\n    function (key) {\n      this.set(recipe[key], this.pick(key, obj), tgt)\n    }.bind(this)\n  )\n  return tgt\n}\n\n/**\n *\n * Convert object to dotted-key/value pair\n *\n * Usage:\n *\n *   var tgt = dot.dot(obj)\n *\n *   or\n *\n *   var tgt = {}\n *   dot.dot(obj, tgt)\n *\n * @param {Object} obj source object\n * @param {Object} tgt target object\n * @param {Array} path path array (internal)\n */\nDotObject.prototype.dot = function (obj, tgt, path) {\n  tgt = tgt || {}\n  path = path || []\n  var isArray = Array.isArray(obj)\n\n  Object.keys(obj).forEach(\n    function (key) {\n      var index = isArray && this.useBrackets ? '[' + key + ']' : key\n      if (\n        isArrayOrObject(obj[key]) &&\n        ((isObject(obj[key]) && !isEmptyObject(obj[key])) ||\n          (Array.isArray(obj[key]) && !this.keepArray && obj[key].length !== 0))\n      ) {\n        if (isArray && this.useBrackets) {\n          var previousKey = path[path.length - 1] || ''\n          return this.dot(\n            obj[key],\n            tgt,\n            path.slice(0, -1).concat(previousKey + index)\n          )\n        } else {\n          return this.dot(obj[key], tgt, path.concat(index))\n        }\n      } else {\n        if (isArray && this.useBrackets) {\n          tgt[path.join(this.separator).concat('[' + key + ']')] = obj[key]\n        } else {\n          tgt[path.concat(index).join(this.separator)] = obj[key]\n        }\n      }\n    }.bind(this)\n  )\n  return tgt\n}\n\nDotObject.pick = wrap('pick')\nDotObject.move = wrap('move')\nDotObject.transfer = wrap('transfer')\nDotObject.transform = wrap('transform')\nDotObject.copy = wrap('copy')\nDotObject.object = wrap('object')\nDotObject.str = wrap('str')\nDotObject.set = wrap('set')\nDotObject.delete = wrap('delete')\nDotObject.del = DotObject.remove = wrap('remove')\nDotObject.dot = wrap('dot');\n['override', 'overwrite'].forEach(function (prop) {\n  Object.defineProperty(DotObject, prop, {\n    get: function () {\n      return dotDefault.override\n    },\n    set: function (val) {\n      dotDefault.override = !!val\n    }\n  })\n});\n['useArray', 'keepArray', 'useBrackets'].forEach(function (prop) {\n  Object.defineProperty(DotObject, prop, {\n    get: function () {\n      return dotDefault[prop]\n    },\n    set: function (val) {\n      dotDefault[prop] = val\n    }\n  })\n})\n\nDotObject._process = _process\n\nmodule.exports = DotObject\n"],
  "mappings": "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",
  "names": []
}
