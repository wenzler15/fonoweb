declare function safeMap<T, U extends any>(callback: (value: T) => U | undefined | null, value: T | undefined | null): U | undefined | null;
declare function safeMap<T, U extends any>(callback: (value: T) => U | undefined | null): (value: T | undefined | null) => U | undefined | null;
declare function safeFold<T, U>(ifNotPresent: () => U | undefined | null): (ifPresent: (value: T) => U) => (value: T | undefined | null) => U | undefined | null;
declare function safeFold<T, U>(ifNotPresent: () => U | undefined | null, ifPresent: (value: T) => U): (value: T | undefined | null) => U | undefined | null;
declare function safeFold<T, U>(ifNotPresent: () => U | undefined | null, ifPresent: (value: T) => U, value: T | undefined | null): U | undefined | null;
export declare const safe: {
    map: typeof safeMap;
    fold: typeof safeFold;
};
export {};
//# sourceMappingURL=safe.d.ts.map