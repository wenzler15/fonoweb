{"version":3,"file":"index.mjs","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(row.getValue<string>(columnId)?.toLowerCase().includes(search))\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(row.getValue<string>(columnId)?.includes(filterValue))\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n        \n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if(!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0, '')\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","flatMap","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","_features","reduce","obj","feature","Object","assign","createHeader","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","orderedLeafColumns","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","center","columnsToGroup","headerFamily","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","initialState","resetHeaderSizeInfo","getTotalSize","getLeftTotalSize","getCenterTotalSize","getRightTotalSize","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","equalsString","arrIncludes","arrIncludesAll","arrIncludesSome","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","Array","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","getAllLeafColumns","updateFn","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","toString","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","resetGrouping","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","pageCount","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","getPaginationRowModel","_getPaginationRowModel","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","pinningState","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","a","b","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","defaultOptions","mergeOptions","coreInitialState","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","renderFallbackValue","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","pass","resolvedColumnFilters","resolvedGlobalFilters","filterableIds","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","facetedRowModel","facetedUniqueValues","has","set","get","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}