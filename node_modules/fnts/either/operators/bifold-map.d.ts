/**
 * @module Either Operators
 */
import type { Either } from '../either';
import type { Map } from '../../types/map';
/**
 * Maps provided `monad` to a value,
 * then returns it.
 */
export default function bifoldMap<LeftValue, RightValue, Value>(map: Map<LeftValue | RightValue, Value>): (monad: Either<LeftValue, RightValue>) => Value;
/**
 * Maps provided `monad` to a value,
 * then returns it.
 */
export default function bifoldMap<LeftValue, RightValue, Value>(monad: Either<LeftValue, RightValue>, map: Map<LeftValue | RightValue, Value>): Value;
/**
 * Maps left and right values of the provided `monad` to a value,
 * then returns it.
 */
export default function bifoldMap<LeftValue, RightValue, Value>(mapLeft: Map<LeftValue, Value>, mapRight: Map<RightValue, Value>): (monad: Either<LeftValue, RightValue>) => Value;
/**
 * Maps left and right values of the provided `monad` to a value,
 * then returns it.
 */
export default function bifoldMap<LeftValue, RightValue, Value>(monad: Either<LeftValue, RightValue>, mapLeft: Map<LeftValue, Value>, mapRight: Map<RightValue, Value>): Value;
