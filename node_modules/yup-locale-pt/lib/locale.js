"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.string = exports.object = exports.number = exports.mixed = exports.default = exports.date = exports.boolean = exports.array = void 0;

var _printValue = _interopRequireDefault(require("./printValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mixed = {
  default: '${path} é inválido',
  required: '${path} é obrigatório',
  oneOf: '${path} deve ter um dos seguintes valores: ${values}',
  notOneOf: '${path} não deve ter nenhum dos seguintes valores: ${values}',
  notType: ({
    path,
    type,
    value,
    originalValue
  }) => {
    const isCast = originalValue != null && originalValue !== value;
    let msg = `${`${path} deve ser do tipo \`${type}\`, ` + `mas o valor final é: \`${(0, _printValue.default)(value, true)}\``}${isCast ? ` (cast do valor \`${(0, _printValue.default)(originalValue, true)}\`)` : ''}`;

    if (value === null) {
      msg += '\nse a intenção era usar "null" como um valor em branco marque o esquema como `.nullable()`';
    }

    return msg;
  },
  defined: '${path} não deve ser indefinido'
};
exports.mixed = mixed;
const string = {
  length: ({
    path,
    length
  }) => `${path} deve ter exatamente ${length} ${length === 1 ? 'caractere' : 'caracteres'}`,
  min: ({
    path,
    min
  }) => `${path} deve ter pelo menos ${min} ${min === 1 ? 'caractere' : 'caracteres'}`,
  max: ({
    path,
    max
  }) => `${path} deve ter no máximo ${max} ${max === 1 ? 'caractere' : 'caracteres'}`,
  matches: '${path} deve corresponder ao padrão: "${regex}"',
  email: '${path} deve ser um e-mail válido',
  url: '${path} deve ser uma URL válida',
  trim: '${path} não deve conter espaços adicionais no início nem no fim',
  lowercase: '${path} deve estar em letras minúsculas',
  uppercase: '${path} deve estar em letras maiúsculas'
};
exports.string = string;
const number = {
  min: '${path} deve ser maior ou igual a ${min}',
  max: '${path} deve menor ou igual a ${max}',
  lessThan: '${path} deve ser menor que ${less}',
  moreThan: '${path} deve ser maior que ${more}',
  notEqual: '${path} não deve ser igual a ${notEqual}',
  positive: '${path} deve ser um número positivo',
  negative: '${path} deve ser um número negativo',
  integer: '${path} deve ser um número inteiro'
};
exports.number = number;
const date = {
  min: '${path} deve ser posterior a ${min}',
  max: '${path} deve ser anterior a ${max}'
};
exports.date = date;
const boolean = {};
exports.boolean = boolean;
const object = {
  noUnknown: '${path} tem chaves desconhecidas: ${unknown}'
};
exports.object = object;
const array = {
  min: ({
    path,
    min
  }) => `${path} deve ter pelo menos ${min} ${min === 1 ? 'item' : 'itens'}`,
  max: ({
    path,
    max
  }) => `${path} deve ter no máximo ${max} ${max === 1 ? 'item' : 'itens'}`
};
exports.array = array;
var _default = {
  mixed,
  string,
  number,
  date,
  object,
  array,
  boolean
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2NhbGUudHMiXSwibmFtZXMiOlsibWl4ZWQiLCJkZWZhdWx0IiwicmVxdWlyZWQiLCJvbmVPZiIsIm5vdE9uZU9mIiwibm90VHlwZSIsInBhdGgiLCJ0eXBlIiwidmFsdWUiLCJvcmlnaW5hbFZhbHVlIiwiaXNDYXN0IiwibXNnIiwiZGVmaW5lZCIsInN0cmluZyIsImxlbmd0aCIsIm1pbiIsIm1heCIsIm1hdGNoZXMiLCJlbWFpbCIsInVybCIsInRyaW0iLCJsb3dlcmNhc2UiLCJ1cHBlcmNhc2UiLCJudW1iZXIiLCJsZXNzVGhhbiIsIm1vcmVUaGFuIiwibm90RXF1YWwiLCJwb3NpdGl2ZSIsIm5lZ2F0aXZlIiwiaW50ZWdlciIsImRhdGUiLCJib29sZWFuIiwib2JqZWN0Iiwibm9Vbmtub3duIiwiYXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVPLE1BQU1BLEtBQUssR0FBRztBQUNuQkMsRUFBQUEsT0FBTyxFQUFFLG9CQURVO0FBRW5CQyxFQUFBQSxRQUFRLEVBQUUsdUJBRlM7QUFHbkJDLEVBQUFBLEtBQUssRUFBRSxzREFIWTtBQUluQkMsRUFBQUEsUUFBUSxFQUFFLDhEQUpTO0FBS25CQyxFQUFBQSxPQUFPLEVBQUUsQ0FBQztBQUNSQyxJQUFBQSxJQURRO0FBQ0ZDLElBQUFBLElBREU7QUFDSUMsSUFBQUEsS0FESjtBQUNXQyxJQUFBQTtBQURYLEdBQUQsS0FFRTtBQUNULFVBQU1DLE1BQU0sR0FBR0QsYUFBYSxJQUFJLElBQWpCLElBQXlCQSxhQUFhLEtBQUtELEtBQTFEO0FBQ0EsUUFBSUcsR0FBRyxHQUFJLEdBQUcsR0FBRUwsSUFBSyx1QkFBc0JDLElBQUssTUFBbkMsR0FDUiwwQkFBeUIseUJBQVdDLEtBQVgsRUFBa0IsSUFBbEIsQ0FBd0IsSUFBSSxHQUN4REUsTUFBTSxHQUNELHFCQUFvQix5QkFBV0QsYUFBWCxFQUEwQixJQUExQixDQUFnQyxLQURuRCxHQUVGLEVBQUcsRUFKVDs7QUFNQSxRQUFJRCxLQUFLLEtBQUssSUFBZCxFQUFvQjtBQUNsQkcsTUFBQUEsR0FBRyxJQUFJLDZGQUFQO0FBQ0Q7O0FBRUQsV0FBT0EsR0FBUDtBQUNELEdBcEJrQjtBQXFCbkJDLEVBQUFBLE9BQU8sRUFBRTtBQXJCVSxDQUFkOztBQXdCQSxNQUFNQyxNQUFNLEdBQUc7QUFDcEJDLEVBQUFBLE1BQU0sRUFBRSxDQUFDO0FBQUVSLElBQUFBLElBQUY7QUFBUVEsSUFBQUE7QUFBUixHQUFELEtBQTRCLEdBQUVSLElBQUssd0JBQXVCUSxNQUFPLElBQUdBLE1BQU0sS0FBSyxDQUFYLEdBQWUsV0FBZixHQUE2QixZQUFhLEVBRGxHO0FBRXBCQyxFQUFBQSxHQUFHLEVBQUUsQ0FBQztBQUFFVCxJQUFBQSxJQUFGO0FBQVFTLElBQUFBO0FBQVIsR0FBRCxLQUF5QixHQUFFVCxJQUFLLHdCQUF1QlMsR0FBSSxJQUFHQSxHQUFHLEtBQUssQ0FBUixHQUFZLFdBQVosR0FBMEIsWUFBYSxFQUZ0RjtBQUdwQkMsRUFBQUEsR0FBRyxFQUFFLENBQUM7QUFBRVYsSUFBQUEsSUFBRjtBQUFRVSxJQUFBQTtBQUFSLEdBQUQsS0FBeUIsR0FBRVYsSUFBSyx1QkFBc0JVLEdBQUksSUFBR0EsR0FBRyxLQUFLLENBQVIsR0FBWSxXQUFaLEdBQTBCLFlBQWEsRUFIckY7QUFJcEJDLEVBQUFBLE9BQU8sRUFBRSxpREFKVztBQUtwQkMsRUFBQUEsS0FBSyxFQUFFLG1DQUxhO0FBTXBCQyxFQUFBQSxHQUFHLEVBQUUsaUNBTmU7QUFPcEJDLEVBQUFBLElBQUksRUFBRSxpRUFQYztBQVFwQkMsRUFBQUEsU0FBUyxFQUFFLHlDQVJTO0FBU3BCQyxFQUFBQSxTQUFTLEVBQUU7QUFUUyxDQUFmOztBQVlBLE1BQU1DLE1BQU0sR0FBRztBQUNwQlIsRUFBQUEsR0FBRyxFQUFFLDBDQURlO0FBRXBCQyxFQUFBQSxHQUFHLEVBQUUsc0NBRmU7QUFHcEJRLEVBQUFBLFFBQVEsRUFBRSxvQ0FIVTtBQUlwQkMsRUFBQUEsUUFBUSxFQUFFLG9DQUpVO0FBS3BCQyxFQUFBQSxRQUFRLEVBQUUsMENBTFU7QUFNcEJDLEVBQUFBLFFBQVEsRUFBRSxxQ0FOVTtBQU9wQkMsRUFBQUEsUUFBUSxFQUFFLHFDQVBVO0FBUXBCQyxFQUFBQSxPQUFPLEVBQUU7QUFSVyxDQUFmOztBQVdBLE1BQU1DLElBQUksR0FBRztBQUNsQmYsRUFBQUEsR0FBRyxFQUFFLHFDQURhO0FBRWxCQyxFQUFBQSxHQUFHLEVBQUU7QUFGYSxDQUFiOztBQUtBLE1BQU1lLE9BQU8sR0FBRyxFQUFoQjs7QUFFQSxNQUFNQyxNQUFNLEdBQUc7QUFDcEJDLEVBQUFBLFNBQVMsRUFBRTtBQURTLENBQWY7O0FBSUEsTUFBTUMsS0FBSyxHQUFHO0FBQ25CbkIsRUFBQUEsR0FBRyxFQUFFLENBQUM7QUFBRVQsSUFBQUEsSUFBRjtBQUFRUyxJQUFBQTtBQUFSLEdBQUQsS0FBeUIsR0FBRVQsSUFBSyx3QkFBdUJTLEdBQUksSUFBR0EsR0FBRyxLQUFLLENBQVIsR0FBWSxNQUFaLEdBQXFCLE9BQVEsRUFEN0U7QUFFbkJDLEVBQUFBLEdBQUcsRUFBRSxDQUFDO0FBQUVWLElBQUFBLElBQUY7QUFBUVUsSUFBQUE7QUFBUixHQUFELEtBQXlCLEdBQUVWLElBQUssdUJBQXNCVSxHQUFJLElBQUdBLEdBQUcsS0FBSyxDQUFSLEdBQVksTUFBWixHQUFxQixPQUFRO0FBRjVFLENBQWQ7O2VBS1E7QUFDYmhCLEVBQUFBLEtBRGE7QUFFYmEsRUFBQUEsTUFGYTtBQUdiVSxFQUFBQSxNQUhhO0FBSWJPLEVBQUFBLElBSmE7QUFLYkUsRUFBQUEsTUFMYTtBQU1iRSxFQUFBQSxLQU5hO0FBT2JILEVBQUFBO0FBUGEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcmludFZhbHVlIGZyb20gJy4vcHJpbnRWYWx1ZSc7XG5cbmV4cG9ydCBjb25zdCBtaXhlZCA9IHtcbiAgZGVmYXVsdDogJyR7cGF0aH0gw6kgaW52w6FsaWRvJyxcbiAgcmVxdWlyZWQ6ICcke3BhdGh9IMOpIG9icmlnYXTDs3JpbycsXG4gIG9uZU9mOiAnJHtwYXRofSBkZXZlIHRlciB1bSBkb3Mgc2VndWludGVzIHZhbG9yZXM6ICR7dmFsdWVzfScsXG4gIG5vdE9uZU9mOiAnJHtwYXRofSBuw6NvIGRldmUgdGVyIG5lbmh1bSBkb3Mgc2VndWludGVzIHZhbG9yZXM6ICR7dmFsdWVzfScsXG4gIG5vdFR5cGU6ICh7XG4gICAgcGF0aCwgdHlwZSwgdmFsdWUsIG9yaWdpbmFsVmFsdWUsXG4gIH06IGFueSkgPT4ge1xuICAgIGNvbnN0IGlzQ2FzdCA9IG9yaWdpbmFsVmFsdWUgIT0gbnVsbCAmJiBvcmlnaW5hbFZhbHVlICE9PSB2YWx1ZTtcbiAgICBsZXQgbXNnID0gYCR7YCR7cGF0aH0gZGV2ZSBzZXIgZG8gdGlwbyBcXGAke3R5cGV9XFxgLCBgXG4gICAgICArIGBtYXMgbyB2YWxvciBmaW5hbCDDqTogXFxgJHtwcmludFZhbHVlKHZhbHVlLCB0cnVlKX1cXGBgfSR7XG4gICAgICBpc0Nhc3RcbiAgICAgICAgPyBgIChjYXN0IGRvIHZhbG9yIFxcYCR7cHJpbnRWYWx1ZShvcmlnaW5hbFZhbHVlLCB0cnVlKX1cXGApYFxuICAgICAgICA6ICcnfWA7XG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIG1zZyArPSAnXFxuc2UgYSBpbnRlbsOnw6NvIGVyYSB1c2FyIFwibnVsbFwiIGNvbW8gdW0gdmFsb3IgZW0gYnJhbmNvIG1hcnF1ZSBvIGVzcXVlbWEgY29tbyBgLm51bGxhYmxlKClgJztcbiAgICB9XG5cbiAgICByZXR1cm4gbXNnO1xuICB9LFxuICBkZWZpbmVkOiAnJHtwYXRofSBuw6NvIGRldmUgc2VyIGluZGVmaW5pZG8nLFxufTtcblxuZXhwb3J0IGNvbnN0IHN0cmluZyA9IHtcbiAgbGVuZ3RoOiAoeyBwYXRoLCBsZW5ndGggfTogYW55KSA9PiBgJHtwYXRofSBkZXZlIHRlciBleGF0YW1lbnRlICR7bGVuZ3RofSAke2xlbmd0aCA9PT0gMSA/ICdjYXJhY3RlcmUnIDogJ2NhcmFjdGVyZXMnfWAsXG4gIG1pbjogKHsgcGF0aCwgbWluIH06IGFueSkgPT4gYCR7cGF0aH0gZGV2ZSB0ZXIgcGVsbyBtZW5vcyAke21pbn0gJHttaW4gPT09IDEgPyAnY2FyYWN0ZXJlJyA6ICdjYXJhY3RlcmVzJ31gLFxuICBtYXg6ICh7IHBhdGgsIG1heCB9OiBhbnkpID0+IGAke3BhdGh9IGRldmUgdGVyIG5vIG3DoXhpbW8gJHttYXh9ICR7bWF4ID09PSAxID8gJ2NhcmFjdGVyZScgOiAnY2FyYWN0ZXJlcyd9YCxcbiAgbWF0Y2hlczogJyR7cGF0aH0gZGV2ZSBjb3JyZXNwb25kZXIgYW8gcGFkcsOjbzogXCIke3JlZ2V4fVwiJyxcbiAgZW1haWw6ICcke3BhdGh9IGRldmUgc2VyIHVtIGUtbWFpbCB2w6FsaWRvJyxcbiAgdXJsOiAnJHtwYXRofSBkZXZlIHNlciB1bWEgVVJMIHbDoWxpZGEnLFxuICB0cmltOiAnJHtwYXRofSBuw6NvIGRldmUgY29udGVyIGVzcGHDp29zIGFkaWNpb25haXMgbm8gaW7DrWNpbyBuZW0gbm8gZmltJyxcbiAgbG93ZXJjYXNlOiAnJHtwYXRofSBkZXZlIGVzdGFyIGVtIGxldHJhcyBtaW7DunNjdWxhcycsXG4gIHVwcGVyY2FzZTogJyR7cGF0aH0gZGV2ZSBlc3RhciBlbSBsZXRyYXMgbWFpw7pzY3VsYXMnLFxufTtcblxuZXhwb3J0IGNvbnN0IG51bWJlciA9IHtcbiAgbWluOiAnJHtwYXRofSBkZXZlIHNlciBtYWlvciBvdSBpZ3VhbCBhICR7bWlufScsXG4gIG1heDogJyR7cGF0aH0gZGV2ZSBtZW5vciBvdSBpZ3VhbCBhICR7bWF4fScsXG4gIGxlc3NUaGFuOiAnJHtwYXRofSBkZXZlIHNlciBtZW5vciBxdWUgJHtsZXNzfScsXG4gIG1vcmVUaGFuOiAnJHtwYXRofSBkZXZlIHNlciBtYWlvciBxdWUgJHttb3JlfScsXG4gIG5vdEVxdWFsOiAnJHtwYXRofSBuw6NvIGRldmUgc2VyIGlndWFsIGEgJHtub3RFcXVhbH0nLFxuICBwb3NpdGl2ZTogJyR7cGF0aH0gZGV2ZSBzZXIgdW0gbsO6bWVybyBwb3NpdGl2bycsXG4gIG5lZ2F0aXZlOiAnJHtwYXRofSBkZXZlIHNlciB1bSBuw7ptZXJvIG5lZ2F0aXZvJyxcbiAgaW50ZWdlcjogJyR7cGF0aH0gZGV2ZSBzZXIgdW0gbsO6bWVybyBpbnRlaXJvJyxcbn07XG5cbmV4cG9ydCBjb25zdCBkYXRlID0ge1xuICBtaW46ICcke3BhdGh9IGRldmUgc2VyIHBvc3RlcmlvciBhICR7bWlufScsXG4gIG1heDogJyR7cGF0aH0gZGV2ZSBzZXIgYW50ZXJpb3IgYSAke21heH0nLFxufTtcblxuZXhwb3J0IGNvbnN0IGJvb2xlYW4gPSB7fTtcblxuZXhwb3J0IGNvbnN0IG9iamVjdCA9IHtcbiAgbm9Vbmtub3duOiAnJHtwYXRofSB0ZW0gY2hhdmVzIGRlc2NvbmhlY2lkYXM6ICR7dW5rbm93bn0nLFxufTtcblxuZXhwb3J0IGNvbnN0IGFycmF5ID0ge1xuICBtaW46ICh7IHBhdGgsIG1pbiB9OiBhbnkpID0+IGAke3BhdGh9IGRldmUgdGVyIHBlbG8gbWVub3MgJHttaW59ICR7bWluID09PSAxID8gJ2l0ZW0nIDogJ2l0ZW5zJ31gLFxuICBtYXg6ICh7IHBhdGgsIG1heCB9OiBhbnkpID0+IGAke3BhdGh9IGRldmUgdGVyIG5vIG3DoXhpbW8gJHttYXh9ICR7bWF4ID09PSAxID8gJ2l0ZW0nIDogJ2l0ZW5zJ31gLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBtaXhlZCxcbiAgc3RyaW5nLFxuICBudW1iZXIsXG4gIGRhdGUsXG4gIG9iamVjdCxcbiAgYXJyYXksXG4gIGJvb2xlYW4sXG59O1xuIl19