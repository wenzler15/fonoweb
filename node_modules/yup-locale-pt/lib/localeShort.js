"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.string = exports.object = exports.number = exports.mixed = exports.default = exports.date = exports.boolean = exports.array = void 0;

var _printValue = _interopRequireDefault(require("./printValue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mixed = {
  default: 'Inválido.',
  required: 'Obrigatório.',
  oneOf: 'Deve ter um dos seguintes valores: ${values}.',
  notOneOf: 'Não deve ter nenhum dos seguintes valores: ${values}.',
  notType: ({
    type,
    value,
    originalValue
  }) => {
    const isCast = originalValue != null && originalValue !== value;
    let msg = `${`Deve ser do tipo \`${type}\`, ` + `mas o valor final é: \`${(0, _printValue.default)(value, true)}\``}${isCast ? ` (cast do valor \`${(0, _printValue.default)(originalValue, true)}\`).` : '.'}`;

    if (value === null) {
      msg += '\nSe a intenção era usar "null" como um valor em branco marque o esquema como `.nullable()`.';
    }

    return msg;
  },
  defined: 'Não deve ser indefinido.'
};
exports.mixed = mixed;
const string = {
  length: ({
    length
  }) => `Deve ter exatamente ${length} ${length === 1 ? 'caractere' : 'caracteres'}.`,
  min: ({
    min
  }) => `Deve ter pelo menos ${min} ${min === 1 ? 'caractere' : 'caracteres'}.`,
  max: ({
    max
  }) => `Deve ter no máximo ${max} ${max === 1 ? 'caractere' : 'caracteres'}.`,
  matches: 'Deve corresponder ao padrão: "${regex}".',
  email: 'Deve ser um e-mail válido.',
  url: 'Deve ser uma URL válida.',
  trim: 'Não deve conter espaços adicionais no início nem no fim.',
  lowercase: 'Deve estar em letras minúsculas.',
  uppercase: 'Deve estar em letras maiúsculas.'
};
exports.string = string;
const number = {
  min: 'Deve ser maior ou igual a ${min}.',
  max: 'Deve ser menor ou igual a ${max}.',
  lessThan: 'Deve ser menor que ${less}.',
  moreThan: 'Deve ser maior que ${more}.',
  notEqual: 'Não deve ser igual a ${notEqual}.',
  positive: 'Deve ser um número positivo.',
  negative: 'Deve ser um número negativo.',
  integer: 'Deve ser um número inteiro.'
};
exports.number = number;
const date = {
  min: 'Deve ser posterior a ${min}.',
  max: 'Deve ser anterior a ${max}.'
};
exports.date = date;
const boolean = {};
exports.boolean = boolean;
const object = {
  noUnknown: 'Existem chaves desconhecidas: ${unknown}.'
};
exports.object = object;
const array = {
  min: ({
    min
  }) => `Deve ter pelo menos ${min} ${min === 1 ? 'item' : 'itens'}.`,
  max: ({
    max
  }) => `Deve ter no máximo ${max} ${max === 1 ? 'item' : 'itens'}.`
};
exports.array = array;
var _default = {
  mixed,
  string,
  number,
  date,
  object,
  array,
  boolean
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2NhbGVTaG9ydC50cyJdLCJuYW1lcyI6WyJtaXhlZCIsImRlZmF1bHQiLCJyZXF1aXJlZCIsIm9uZU9mIiwibm90T25lT2YiLCJub3RUeXBlIiwidHlwZSIsInZhbHVlIiwib3JpZ2luYWxWYWx1ZSIsImlzQ2FzdCIsIm1zZyIsImRlZmluZWQiLCJzdHJpbmciLCJsZW5ndGgiLCJtaW4iLCJtYXgiLCJtYXRjaGVzIiwiZW1haWwiLCJ1cmwiLCJ0cmltIiwibG93ZXJjYXNlIiwidXBwZXJjYXNlIiwibnVtYmVyIiwibGVzc1RoYW4iLCJtb3JlVGhhbiIsIm5vdEVxdWFsIiwicG9zaXRpdmUiLCJuZWdhdGl2ZSIsImludGVnZXIiLCJkYXRlIiwiYm9vbGVhbiIsIm9iamVjdCIsIm5vVW5rbm93biIsImFycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFTyxNQUFNQSxLQUFLLEdBQUc7QUFDbkJDLEVBQUFBLE9BQU8sRUFBRSxXQURVO0FBRW5CQyxFQUFBQSxRQUFRLEVBQUUsY0FGUztBQUduQkMsRUFBQUEsS0FBSyxFQUFFLCtDQUhZO0FBSW5CQyxFQUFBQSxRQUFRLEVBQUUsdURBSlM7QUFLbkJDLEVBQUFBLE9BQU8sRUFBRSxDQUFDO0FBQ1JDLElBQUFBLElBRFE7QUFDRkMsSUFBQUEsS0FERTtBQUNLQyxJQUFBQTtBQURMLEdBQUQsS0FFRTtBQUNULFVBQU1DLE1BQU0sR0FBR0QsYUFBYSxJQUFJLElBQWpCLElBQXlCQSxhQUFhLEtBQUtELEtBQTFEO0FBQ0EsUUFBSUcsR0FBRyxHQUFJLEdBQUcsc0JBQXFCSixJQUFLLE1BQTNCLEdBQ1IsMEJBQXlCLHlCQUFXQyxLQUFYLEVBQWtCLElBQWxCLENBQXdCLElBQUksR0FDeERFLE1BQU0sR0FDRCxxQkFBb0IseUJBQVdELGFBQVgsRUFBMEIsSUFBMUIsQ0FBZ0MsTUFEbkQsR0FFRixHQUFJLEVBSlY7O0FBTUEsUUFBSUQsS0FBSyxLQUFLLElBQWQsRUFBb0I7QUFDbEJHLE1BQUFBLEdBQUcsSUFBSSw4RkFBUDtBQUNEOztBQUVELFdBQU9BLEdBQVA7QUFDRCxHQXBCa0I7QUFxQm5CQyxFQUFBQSxPQUFPLEVBQUU7QUFyQlUsQ0FBZDs7QUF3QkEsTUFBTUMsTUFBTSxHQUFHO0FBQ3BCQyxFQUFBQSxNQUFNLEVBQUUsQ0FBQztBQUFFQSxJQUFBQTtBQUFGLEdBQUQsS0FBc0IsdUJBQXNCQSxNQUFPLElBQUdBLE1BQU0sS0FBSyxDQUFYLEdBQWUsV0FBZixHQUE2QixZQUFhLEdBRHBGO0FBRXBCQyxFQUFBQSxHQUFHLEVBQUUsQ0FBQztBQUFFQSxJQUFBQTtBQUFGLEdBQUQsS0FBbUIsdUJBQXNCQSxHQUFJLElBQUdBLEdBQUcsS0FBSyxDQUFSLEdBQVksV0FBWixHQUEwQixZQUFhLEdBRnhFO0FBR3BCQyxFQUFBQSxHQUFHLEVBQUUsQ0FBQztBQUFFQSxJQUFBQTtBQUFGLEdBQUQsS0FBbUIsc0JBQXFCQSxHQUFJLElBQUdBLEdBQUcsS0FBSyxDQUFSLEdBQVksV0FBWixHQUEwQixZQUFhLEdBSHZFO0FBSXBCQyxFQUFBQSxPQUFPLEVBQUUsMENBSlc7QUFLcEJDLEVBQUFBLEtBQUssRUFBRSw0QkFMYTtBQU1wQkMsRUFBQUEsR0FBRyxFQUFFLDBCQU5lO0FBT3BCQyxFQUFBQSxJQUFJLEVBQUUsMERBUGM7QUFRcEJDLEVBQUFBLFNBQVMsRUFBRSxrQ0FSUztBQVNwQkMsRUFBQUEsU0FBUyxFQUFFO0FBVFMsQ0FBZjs7QUFZQSxNQUFNQyxNQUFNLEdBQUc7QUFDcEJSLEVBQUFBLEdBQUcsRUFBRSxtQ0FEZTtBQUVwQkMsRUFBQUEsR0FBRyxFQUFFLG1DQUZlO0FBR3BCUSxFQUFBQSxRQUFRLEVBQUUsNkJBSFU7QUFJcEJDLEVBQUFBLFFBQVEsRUFBRSw2QkFKVTtBQUtwQkMsRUFBQUEsUUFBUSxFQUFFLG1DQUxVO0FBTXBCQyxFQUFBQSxRQUFRLEVBQUUsOEJBTlU7QUFPcEJDLEVBQUFBLFFBQVEsRUFBRSw4QkFQVTtBQVFwQkMsRUFBQUEsT0FBTyxFQUFFO0FBUlcsQ0FBZjs7QUFXQSxNQUFNQyxJQUFJLEdBQUc7QUFDbEJmLEVBQUFBLEdBQUcsRUFBRSw4QkFEYTtBQUVsQkMsRUFBQUEsR0FBRyxFQUFFO0FBRmEsQ0FBYjs7QUFLQSxNQUFNZSxPQUFPLEdBQUcsRUFBaEI7O0FBRUEsTUFBTUMsTUFBTSxHQUFHO0FBQ3BCQyxFQUFBQSxTQUFTLEVBQUU7QUFEUyxDQUFmOztBQUlBLE1BQU1DLEtBQUssR0FBRztBQUNuQm5CLEVBQUFBLEdBQUcsRUFBRSxDQUFDO0FBQUVBLElBQUFBO0FBQUYsR0FBRCxLQUFvQix1QkFBc0JBLEdBQUksSUFBR0EsR0FBRyxLQUFLLENBQVIsR0FBWSxNQUFaLEdBQW9CLE9BQVEsR0FEL0Q7QUFFbkJDLEVBQUFBLEdBQUcsRUFBRSxDQUFDO0FBQUVBLElBQUFBO0FBQUYsR0FBRCxLQUFvQixzQkFBcUJBLEdBQUksSUFBR0EsR0FBRyxLQUFLLENBQVIsR0FBWSxNQUFaLEdBQW9CLE9BQVE7QUFGOUQsQ0FBZDs7ZUFLUTtBQUNiZixFQUFBQSxLQURhO0FBRWJZLEVBQUFBLE1BRmE7QUFHYlUsRUFBQUEsTUFIYTtBQUliTyxFQUFBQSxJQUphO0FBS2JFLEVBQUFBLE1BTGE7QUFNYkUsRUFBQUEsS0FOYTtBQU9iSCxFQUFBQTtBQVBhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcHJpbnRWYWx1ZSBmcm9tICcuL3ByaW50VmFsdWUnO1xuXG5leHBvcnQgY29uc3QgbWl4ZWQgPSB7XG4gIGRlZmF1bHQ6ICdJbnbDoWxpZG8uJyxcbiAgcmVxdWlyZWQ6ICdPYnJpZ2F0w7NyaW8uJyxcbiAgb25lT2Y6ICdEZXZlIHRlciB1bSBkb3Mgc2VndWludGVzIHZhbG9yZXM6ICR7dmFsdWVzfS4nLFxuICBub3RPbmVPZjogJ07Do28gZGV2ZSB0ZXIgbmVuaHVtIGRvcyBzZWd1aW50ZXMgdmFsb3JlczogJHt2YWx1ZXN9LicsXG4gIG5vdFR5cGU6ICh7XG4gICAgdHlwZSwgdmFsdWUsIG9yaWdpbmFsVmFsdWUsXG4gIH06IGFueSkgPT4ge1xuICAgIGNvbnN0IGlzQ2FzdCA9IG9yaWdpbmFsVmFsdWUgIT0gbnVsbCAmJiBvcmlnaW5hbFZhbHVlICE9PSB2YWx1ZTtcbiAgICBsZXQgbXNnID0gYCR7YERldmUgc2VyIGRvIHRpcG8gXFxgJHt0eXBlfVxcYCwgYFxuICAgICAgKyBgbWFzIG8gdmFsb3IgZmluYWwgw6k6IFxcYCR7cHJpbnRWYWx1ZSh2YWx1ZSwgdHJ1ZSl9XFxgYH0ke1xuICAgICAgaXNDYXN0XG4gICAgICAgID8gYCAoY2FzdCBkbyB2YWxvciBcXGAke3ByaW50VmFsdWUob3JpZ2luYWxWYWx1ZSwgdHJ1ZSl9XFxgKS5gXG4gICAgICAgIDogJy4nfWA7XG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIG1zZyArPSAnXFxuU2UgYSBpbnRlbsOnw6NvIGVyYSB1c2FyIFwibnVsbFwiIGNvbW8gdW0gdmFsb3IgZW0gYnJhbmNvIG1hcnF1ZSBvIGVzcXVlbWEgY29tbyBgLm51bGxhYmxlKClgLic7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1zZztcbiAgfSxcbiAgZGVmaW5lZDogJ07Do28gZGV2ZSBzZXIgaW5kZWZpbmlkby4nLFxufTtcblxuZXhwb3J0IGNvbnN0IHN0cmluZyA9IHtcbiAgbGVuZ3RoOiAoeyBsZW5ndGggfTogYW55KSA9PiBgRGV2ZSB0ZXIgZXhhdGFtZW50ZSAke2xlbmd0aH0gJHtsZW5ndGggPT09IDEgPyAnY2FyYWN0ZXJlJyA6ICdjYXJhY3RlcmVzJ30uYCxcbiAgbWluOiAoeyBtaW4gfTogYW55KSA9PiBgRGV2ZSB0ZXIgcGVsbyBtZW5vcyAke21pbn0gJHttaW4gPT09IDEgPyAnY2FyYWN0ZXJlJyA6ICdjYXJhY3RlcmVzJ30uYCxcbiAgbWF4OiAoeyBtYXggfTogYW55KSA9PiBgRGV2ZSB0ZXIgbm8gbcOheGltbyAke21heH0gJHttYXggPT09IDEgPyAnY2FyYWN0ZXJlJyA6ICdjYXJhY3RlcmVzJ30uYCxcbiAgbWF0Y2hlczogJ0RldmUgY29ycmVzcG9uZGVyIGFvIHBhZHLDo286IFwiJHtyZWdleH1cIi4nLFxuICBlbWFpbDogJ0RldmUgc2VyIHVtIGUtbWFpbCB2w6FsaWRvLicsXG4gIHVybDogJ0RldmUgc2VyIHVtYSBVUkwgdsOhbGlkYS4nLFxuICB0cmltOiAnTsOjbyBkZXZlIGNvbnRlciBlc3Bhw6dvcyBhZGljaW9uYWlzIG5vIGluw61jaW8gbmVtIG5vIGZpbS4nLFxuICBsb3dlcmNhc2U6ICdEZXZlIGVzdGFyIGVtIGxldHJhcyBtaW7DunNjdWxhcy4nLFxuICB1cHBlcmNhc2U6ICdEZXZlIGVzdGFyIGVtIGxldHJhcyBtYWnDunNjdWxhcy4nLFxufTtcblxuZXhwb3J0IGNvbnN0IG51bWJlciA9IHtcbiAgbWluOiAnRGV2ZSBzZXIgbWFpb3Igb3UgaWd1YWwgYSAke21pbn0uJyxcbiAgbWF4OiAnRGV2ZSBzZXIgbWVub3Igb3UgaWd1YWwgYSAke21heH0uJyxcbiAgbGVzc1RoYW46ICdEZXZlIHNlciBtZW5vciBxdWUgJHtsZXNzfS4nLFxuICBtb3JlVGhhbjogJ0RldmUgc2VyIG1haW9yIHF1ZSAke21vcmV9LicsXG4gIG5vdEVxdWFsOiAnTsOjbyBkZXZlIHNlciBpZ3VhbCBhICR7bm90RXF1YWx9LicsXG4gIHBvc2l0aXZlOiAnRGV2ZSBzZXIgdW0gbsO6bWVybyBwb3NpdGl2by4nLFxuICBuZWdhdGl2ZTogJ0RldmUgc2VyIHVtIG7Dum1lcm8gbmVnYXRpdm8uJyxcbiAgaW50ZWdlcjogJ0RldmUgc2VyIHVtIG7Dum1lcm8gaW50ZWlyby4nLFxufTtcblxuZXhwb3J0IGNvbnN0IGRhdGUgPSB7XG4gIG1pbjogJ0RldmUgc2VyIHBvc3RlcmlvciBhICR7bWlufS4nLFxuICBtYXg6ICdEZXZlIHNlciBhbnRlcmlvciBhICR7bWF4fS4nLFxufTtcblxuZXhwb3J0IGNvbnN0IGJvb2xlYW4gPSB7fTtcblxuZXhwb3J0IGNvbnN0IG9iamVjdCA9IHtcbiAgbm9Vbmtub3duOiAnRXhpc3RlbSBjaGF2ZXMgZGVzY29uaGVjaWRhczogJHt1bmtub3dufS4nLFxufTtcblxuZXhwb3J0IGNvbnN0IGFycmF5ID0ge1xuICBtaW46ICh7IG1pbiB9IDogYW55KSA9PiBgRGV2ZSB0ZXIgcGVsbyBtZW5vcyAke21pbn0gJHttaW4gPT09IDEgPyAnaXRlbSc6ICdpdGVucyd9LmAsXG4gIG1heDogKHsgbWF4IH0gOiBhbnkpID0+IGBEZXZlIHRlciBubyBtw6F4aW1vICR7bWF4fSAke21heCA9PT0gMSA/ICdpdGVtJzogJ2l0ZW5zJ30uYCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbWl4ZWQsXG4gIHN0cmluZyxcbiAgbnVtYmVyLFxuICBkYXRlLFxuICBvYmplY3QsXG4gIGFycmF5LFxuICBib29sZWFuLFxufTtcbiJdfQ==