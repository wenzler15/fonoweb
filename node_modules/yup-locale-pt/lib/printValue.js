"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = printValue;

/* https://github.com/jquense/yup/blob/master/src/util/printValue.js */

/* eslint-disable eqeqeq */

/* eslint-disable no-restricted-globals */

/* eslint-disable func-names */

/* eslint-disable no-shadow */
const {
  toString
} = Object.prototype;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : () => '';
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;

function printNumber(val) {
  if (val != +val) return 'NaN';
  const isNegativeZero = val === 0 && 1 / val < 0;
  return isNegativeZero ? '-0' : `${val}`;
}

function printSimpleValue(val, quoteStrings = false) {
  if (val == null || val === true || val === false) return `${val}`;
  const typeOf = typeof val;
  if (typeOf === 'number') return printNumber(val);
  if (typeOf === 'string') return quoteStrings ? `"${val}"` : val;

  if (typeOf === 'function') {
    return `[Function ${val.name || 'anonymous'}]`;
  }

  if (typeOf === 'symbol') {
    return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  }

  const tag = toString.call(val).slice(8, -1);

  if (tag === 'Date') {
    return isNaN(val.getTime()) ? `${val}` : val.toISOString(val);
  }

  if (tag === 'Error' || val instanceof Error) {
    return `[${errorToString.call(val)}]`;
  }

  if (tag === 'RegExp') return regExpToString.call(val);
  return null;
}

function printValue(value, quoteStrings) {
  const result = printSimpleValue(value, quoteStrings);
  if (result !== null) return result;
  return JSON.stringify(value, function (key, value) {
    const result = printSimpleValue(this[key], quoteStrings);
    if (result !== null) return result;
    return value;
  }, 2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcmludFZhbHVlLnRzIl0sIm5hbWVzIjpbInRvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiZXJyb3JUb1N0cmluZyIsIkVycm9yIiwicmVnRXhwVG9TdHJpbmciLCJSZWdFeHAiLCJzeW1ib2xUb1N0cmluZyIsIlN5bWJvbCIsIlNZTUJPTF9SRUdFWFAiLCJwcmludE51bWJlciIsInZhbCIsImlzTmVnYXRpdmVaZXJvIiwicHJpbnRTaW1wbGVWYWx1ZSIsInF1b3RlU3RyaW5ncyIsInR5cGVPZiIsIm5hbWUiLCJjYWxsIiwicmVwbGFjZSIsInRhZyIsInNsaWNlIiwiaXNOYU4iLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJwcmludFZhbHVlIiwidmFsdWUiLCJyZXN1bHQiLCJKU09OIiwic3RyaW5naWZ5Iiwia2V5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7QUFFQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBZUMsTUFBTSxDQUFDQyxTQUE1QjtBQUNBLE1BQU1DLGFBQWEsR0FBR0MsS0FBSyxDQUFDRixTQUFOLENBQWdCRixRQUF0QztBQUNBLE1BQU1LLGNBQWMsR0FBR0MsTUFBTSxDQUFDSixTQUFQLENBQWlCRixRQUF4QztBQUNBLE1BQU1PLGNBQWMsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQSxNQUFNLENBQUNOLFNBQVAsQ0FBaUJGLFFBQWpELEdBQTRELE1BQU0sRUFBekY7QUFFQSxNQUFNUyxhQUFhLEdBQUcsc0JBQXRCOztBQUVBLFNBQVNDLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQXVDO0FBQ3JDLE1BQUlBLEdBQUcsSUFBSSxDQUFDQSxHQUFaLEVBQWlCLE9BQU8sS0FBUDtBQUNqQixRQUFNQyxjQUFjLEdBQUdELEdBQUcsS0FBSyxDQUFSLElBQWEsSUFBSUEsR0FBSixHQUFVLENBQTlDO0FBQ0EsU0FBT0MsY0FBYyxHQUFHLElBQUgsR0FBVyxHQUFFRCxHQUFJLEVBQXRDO0FBQ0Q7O0FBRUQsU0FBU0UsZ0JBQVQsQ0FBMEJGLEdBQTFCLEVBQW9DRyxZQUFxQixHQUFHLEtBQTVELEVBQWtGO0FBQ2hGLE1BQUlILEdBQUcsSUFBSSxJQUFQLElBQWVBLEdBQUcsS0FBSyxJQUF2QixJQUErQkEsR0FBRyxLQUFLLEtBQTNDLEVBQWtELE9BQVEsR0FBRUEsR0FBSSxFQUFkO0FBRWxELFFBQU1JLE1BQU0sR0FBRyxPQUFPSixHQUF0QjtBQUNBLE1BQUlJLE1BQU0sS0FBSyxRQUFmLEVBQXlCLE9BQU9MLFdBQVcsQ0FBQ0MsR0FBRCxDQUFsQjtBQUN6QixNQUFJSSxNQUFNLEtBQUssUUFBZixFQUF5QixPQUFPRCxZQUFZLEdBQUksSUFBR0gsR0FBSSxHQUFYLEdBQWdCQSxHQUFuQzs7QUFDekIsTUFBSUksTUFBTSxLQUFLLFVBQWYsRUFBMkI7QUFBRSxXQUFRLGFBQVlKLEdBQUcsQ0FBQ0ssSUFBSixJQUFZLFdBQVksR0FBNUM7QUFBaUQ7O0FBQzlFLE1BQUlELE1BQU0sS0FBSyxRQUFmLEVBQXlCO0FBQUUsV0FBT1IsY0FBYyxDQUFDVSxJQUFmLENBQW9CTixHQUFwQixFQUF5Qk8sT0FBekIsQ0FBaUNULGFBQWpDLEVBQWdELFlBQWhELENBQVA7QUFBdUU7O0FBRWxHLFFBQU1VLEdBQUcsR0FBR25CLFFBQVEsQ0FBQ2lCLElBQVQsQ0FBY04sR0FBZCxFQUFtQlMsS0FBbkIsQ0FBeUIsQ0FBekIsRUFBNEIsQ0FBQyxDQUE3QixDQUFaOztBQUNBLE1BQUlELEdBQUcsS0FBSyxNQUFaLEVBQW9CO0FBQUUsV0FBT0UsS0FBSyxDQUFDVixHQUFHLENBQUNXLE9BQUosRUFBRCxDQUFMLEdBQXdCLEdBQUVYLEdBQUksRUFBOUIsR0FBa0NBLEdBQUcsQ0FBQ1ksV0FBSixDQUFnQlosR0FBaEIsQ0FBekM7QUFBZ0U7O0FBQ3RGLE1BQUlRLEdBQUcsS0FBSyxPQUFSLElBQW1CUixHQUFHLFlBQVlQLEtBQXRDLEVBQTZDO0FBQUUsV0FBUSxJQUFHRCxhQUFhLENBQUNjLElBQWQsQ0FBbUJOLEdBQW5CLENBQXdCLEdBQW5DO0FBQXdDOztBQUN2RixNQUFJUSxHQUFHLEtBQUssUUFBWixFQUFzQixPQUFPZCxjQUFjLENBQUNZLElBQWYsQ0FBb0JOLEdBQXBCLENBQVA7QUFFdEIsU0FBTyxJQUFQO0FBQ0Q7O0FBRWMsU0FBU2EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBZ0NYLFlBQWhDLEVBQStEO0FBQzVFLFFBQU1ZLE1BQU0sR0FBR2IsZ0JBQWdCLENBQUNZLEtBQUQsRUFBUVgsWUFBUixDQUEvQjtBQUNBLE1BQUlZLE1BQU0sS0FBSyxJQUFmLEVBQXFCLE9BQU9BLE1BQVA7QUFFckIsU0FBT0MsSUFBSSxDQUFDQyxTQUFMLENBQ0xILEtBREssRUFFTCxVQUFVSSxHQUFWLEVBQXVCSixLQUF2QixFQUFtQztBQUNqQyxVQUFNQyxNQUFNLEdBQUdiLGdCQUFnQixDQUFDLEtBQUtnQixHQUFMLENBQUQsRUFBWWYsWUFBWixDQUEvQjtBQUNBLFFBQUlZLE1BQU0sS0FBSyxJQUFmLEVBQXFCLE9BQU9BLE1BQVA7QUFDckIsV0FBT0QsS0FBUDtBQUNELEdBTkksRUFPTCxDQVBLLENBQVA7QUFTRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlbnNlL3l1cC9ibG9iL21hc3Rlci9zcmMvdXRpbC9wcmludFZhbHVlLmpzICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBmdW5jLW5hbWVzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1zaGFkb3cgKi9cblxuY29uc3QgeyB0b1N0cmluZyB9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IGVycm9yVG9TdHJpbmcgPSBFcnJvci5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCByZWdFeHBUb1N0cmluZyA9IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCBzeW1ib2xUb1N0cmluZyA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA6ICgpID0+ICcnO1xuXG5jb25zdCBTWU1CT0xfUkVHRVhQID0gL15TeW1ib2xcXCgoLiopXFwpKC4qKSQvO1xuXG5mdW5jdGlvbiBwcmludE51bWJlcih2YWw6IGFueSk6IHN0cmluZyB7XG4gIGlmICh2YWwgIT0gK3ZhbCkgcmV0dXJuICdOYU4nO1xuICBjb25zdCBpc05lZ2F0aXZlWmVybyA9IHZhbCA9PT0gMCAmJiAxIC8gdmFsIDwgMDtcbiAgcmV0dXJuIGlzTmVnYXRpdmVaZXJvID8gJy0wJyA6IGAke3ZhbH1gO1xufVxuXG5mdW5jdGlvbiBwcmludFNpbXBsZVZhbHVlKHZhbDogYW55LCBxdW90ZVN0cmluZ3M6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZyB8IG51bGwge1xuICBpZiAodmFsID09IG51bGwgfHwgdmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2UpIHJldHVybiBgJHt2YWx9YDtcblxuICBjb25zdCB0eXBlT2YgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZU9mID09PSAnbnVtYmVyJykgcmV0dXJuIHByaW50TnVtYmVyKHZhbCk7XG4gIGlmICh0eXBlT2YgPT09ICdzdHJpbmcnKSByZXR1cm4gcXVvdGVTdHJpbmdzID8gYFwiJHt2YWx9XCJgIDogdmFsO1xuICBpZiAodHlwZU9mID09PSAnZnVuY3Rpb24nKSB7IHJldHVybiBgW0Z1bmN0aW9uICR7dmFsLm5hbWUgfHwgJ2Fub255bW91cyd9XWA7IH1cbiAgaWYgKHR5cGVPZiA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsKS5yZXBsYWNlKFNZTUJPTF9SRUdFWFAsICdTeW1ib2woJDEpJyk7IH1cblxuICBjb25zdCB0YWcgPSB0b1N0cmluZy5jYWxsKHZhbCkuc2xpY2UoOCwgLTEpO1xuICBpZiAodGFnID09PSAnRGF0ZScpIHsgcmV0dXJuIGlzTmFOKHZhbC5nZXRUaW1lKCkpID8gYCR7dmFsfWAgOiB2YWwudG9JU09TdHJpbmcodmFsKTsgfVxuICBpZiAodGFnID09PSAnRXJyb3InIHx8IHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7IHJldHVybiBgWyR7ZXJyb3JUb1N0cmluZy5jYWxsKHZhbCl9XWA7IH1cbiAgaWYgKHRhZyA9PT0gJ1JlZ0V4cCcpIHJldHVybiByZWdFeHBUb1N0cmluZy5jYWxsKHZhbCk7XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByaW50VmFsdWUodmFsdWU6IGFueSwgcXVvdGVTdHJpbmdzOiBib29sZWFuKTogc3RyaW5nIHtcbiAgY29uc3QgcmVzdWx0ID0gcHJpbnRTaW1wbGVWYWx1ZSh2YWx1ZSwgcXVvdGVTdHJpbmdzKTtcbiAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcblxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoXG4gICAgdmFsdWUsXG4gICAgZnVuY3Rpb24gKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBwcmludFNpbXBsZVZhbHVlKHRoaXNba2V5XSwgcXVvdGVTdHJpbmdzKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICAyLFxuICApO1xufVxuIl19